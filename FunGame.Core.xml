<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FunGame.Core</name>
    </assembly>
    <members>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest">
            <summary>
            需要配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType"/> 使用<para/>
            如果是 <see cref="T:Milimoe.FunGame.Core.Model.Gaming"/> 的数据请求，则配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingType"/> 使用<para/>
            确保已添加对应的枚举
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Result">
            <summary>
            数据请求结果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Error">
            <summary>
            详细错误信息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.IsDisposed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.DataRequest._worker">
            <summary>
            私有的实现类
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.DataRequest._gamingWorker">
            <summary>
            私有的实现类（这是局内请求的）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.DataRequest._isDisposed">
            <summary>
            指示关闭的变量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket,Milimoe.FunGame.Core.Library.Constant.DataRequestType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.Socket"/> 创建新的数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求
            插件则使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            </summary>
            <param name="socket"></param>
            <param name="type"></param>
            <param name="longRunning"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient,Milimoe.FunGame.Core.Library.Constant.DataRequestType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 创建新的数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            插件则使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            此数据请求只能调用异步方法 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/> 请求数据
            </summary>
            <param name="client"></param>
            <param name="type"></param>
            <param name="longRunning"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.Socket"/> 创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)"/> 创建一个新的请求<para/>
            此构造方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="socket"></param>
            <param name="type"></param>
            <param name="longRunning"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)"/> 创建一个新的请求<para/>
            此构造方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的<para/>
            此数据请求只能调用异步方法 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/> 请求数据
            </summary>
            <param name="client"></param>
            <param name="type"></param>
            <param name="longRunning"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.AddRequestData(System.String,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Dispose">
            <summary>
            长时间运行的数据请求需要在使用完毕后自行关闭
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Dispose(System.Boolean)">
            <summary>
            关闭时
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequest">
            <summary>
            向服务器发送数据请求
            <para/>警告：<see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 调用此方法将抛出异常。请调用并等待 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/>
            </summary>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.AsyncSendException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync">
            <summary>
            异步向服务器发送数据请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GetResult``1(System.String)">
            <summary>
            获取指定key对应的反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SocketRequest">
            <summary>
            常规数据请求
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GamingRequest">
            <summary>
            游戏局内请求
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GetDictionaryJsonObject``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            反序列化Dictionary中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.MailSenderID">
            <summary>
            邮件服务内部ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.SmtpClientInfo">
            <summary>
            Smtp客户端信息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.LastestResult">
            <summary>
            上一个邮件发送的结果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.ErrorMsg">
            <summary>
            上一个邮件的发送错误信息（如果发送失败）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.MailSender._SmtpClientInfo">
            内部变量
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            创建邮件服务
            </summary>
            <param name="senderMailAddress"></param>
            <param name="senderName"></param>
            <param name="senderPassword"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="ssl"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.CreateMail(System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            创建完整邮件对象
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="priority"></param>
            <param name="html"></param>
            <param name="toList"></param>
            <param name="ccList"></param>
            <param name="bccList"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Send(Milimoe.FunGame.Core.Library.Common.Network.MailObject)">
            <summary>
            发送邮件
            </summary>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Dispose">
            <summary>
            关闭邮件服务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Dispose(System.Boolean)">
            <summary>
            关闭邮件服务
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper">
            <summary>
            数据库助手类。这是一个抽象类，需要在Server中继承此类实现
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.FunGameType">
            <summary>
            FunGame 类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Mode">
            <summary>
            使用的数据库类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script">
            <summary>
            SQL 脚本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Result">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ServerInfo">
            <summary>
            SQL 服务器信息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.AffectedRows">
            <summary>
            上一次执行命令影响的行数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.LastInsertId">
            <summary>
            上一次执行的命令是 Insert 时，返回的自增 ID，大于 0 有效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.DataSet">
            <summary>
            上一次执行命令的查询结果集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Parameters">
            <summary>
            SQL 语句参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Success">
            <summary>
            上一次执行命令是否成功
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ClearParametersAfterExecute">
            <summary>
            是否在每次执行命令后清除参数，默认为 true
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Execute">
            <summary>
            执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）
            </summary>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Execute(System.String)">
            <summary>
            执行一个指定的命令
            </summary>
            <param name="script">命令</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteAsync">
            <summary>
            异步执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）
            </summary>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteAsync(System.String)">
            <summary>
            异步执行一个指定的命令
            </summary>
            <param name="script">命令</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSet">
            <summary>
            执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）查询 DataSet
            </summary>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSet(System.String)">
            <summary>
            执行指定的命令查询 DataSet
            </summary>
            <param name="script">命令</param>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSetAsync">
            <summary>
            异步执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）查询 DataSet
            </summary>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSetAsync(System.String)">
            <summary>
            异步执行指定的命令查询 DataSet
            </summary>
            <param name="script">命令</param>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRow">
            <summary>
            执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）查询 DataRow（可选实现）
            </summary>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRow(System.String)">
            <summary>
            执行指定的命令查询 DataRow（可选实现）
            </summary>
            <param name="script">命令</param>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRowAsync">
            <summary>
            异步执行现有命令（<see cref="P:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Script"/>）查询 DataRow（可选实现）
            </summary>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRowAsync(System.String)">
            <summary>
            异步执行指定的命令查询 DataRow（可选实现）
            </summary>
            <param name="script">命令</param>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.DatabaseExists">
            <summary>
            查询数据库是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteSqlFile(System.String)">
            <summary>
            执行一个 sql 脚本文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteSqlFileAsync(System.String)">
            <summary>
            异步执行一个 sql 脚本文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.NewTransaction">
            <summary>
            创建一个SQL事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.InitOptional">
            <summary>
            此标记意味着属性允许初始设定，但不是强制的。适用于 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.InitRequired">
            <summary>
            此标记意味着属性需要经过初始设定。适用于 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.AddonVersion">
            <summary>
            此标记意味着字段需要满足 x.x.x 的格式。适用于 <see cref="T:Milimoe.FunGame.Core.Interface.Addons.IAddon"/> 的版本号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Count">
            <summary>
            目前的Model数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.MaxModel">
            <summary>
            最大接受的Model数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Models">
            <summary>
            可参与高并发的字典，但添加效率较低
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.#ctor(System.Int32)">
            <summary>
            Init ModelManager
            </summary>
            <param name="MaxModel">MaxModel</param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Item(System.String)">
            <summary>
            获取Model对象
            </summary>
            <param name="name">Model的Key</param>
            <returns>Model对象</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Add(System.String,`0)">
            <summary>
            向Model管理器中添加Model
            </summary>
            <param name="name">Model的Key</param>
            <param name="t">Model对象</param>
            <returns>True：操作成功</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Remove(System.String)">
            <summary>
            从Model管理器中移除Model
            </summary>
            <param name="name">Model的Key</param>
            <returns>True：操作成功</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Remove(System.String,`0@)">
            <summary>
            将Model移除，并取得这个Model
            </summary>
            <param name="name">Model的Key</param>
            <param name="t">Model对象</param>
            <returns>被移除的Model</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.RemoveAndGet(System.String)">
            <summary>
            将Model移除，并取得这个Model
            </summary>
            <param name="name">Model的Key</param>
            <returns>被移除的Model</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.ContainsKey(System.String)">
            <summary>
            判断是否存在指定的Model
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.Clear">
            <summary>
            清空Model管理器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ConcurrentModelList`1.GetList">
            <summary>
            获取Model对象的列表
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DictionaryExtensions.GetValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            从 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中获取指定键的值，并将其转换为指定的类型。
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="dict">要从中获取值的字典</param>
            <param name="key">要获取值的键</param>
            <returns>转换后的值，如果键不存在或转换失败，则返回默认值。</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1">
            <summary>
            简易的实体模组配置文件生成器，适用范围：动态扩展技能和物品、保存玩家的存档<para/>
            仅支持继承了 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/> 的实体类型，每个 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 仅保存一种实体类型的数据
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="module_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="module_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.#ctor(System.String,System.String)">
            <summary>
            简易的实体模组配置文件生成器，适用范围：动态扩展技能和物品、保存玩家的存档<para/>
            仅支持继承了 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/> 的实体类型，每个 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 仅保存一种实体类型的数据
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="module_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="module_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName">
            <summary>
            模组的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName">
            <summary>
            配置文件的名称（后缀将是.json）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Item(System.String)">
            <summary>
            使用索引器给指定key赋值，不存在key会新增
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Get(System.String)">
            <summary>
            获取指定key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Add(System.String,`0)">
            <summary>
            添加一个配置，如果已存在key会覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.LoadConfig">
            <summary>
            从配置文件中读取配置。
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.SaveConfig">
            <summary>
            将配置保存到配置文件。调用此方法会覆盖原有的.json，请注意备份
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.Factory.OpenFactory">
            <summary>
            支持动态扩展的工厂实例
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.RegisterFactory``1(Milimoe.FunGame.Core.Api.Utility.Factory.EntityFactoryDelegate{``0})">
            <summary>
            注册工厂方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetInstance``1(System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构造一个实体实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.NotSupportedInstanceClassException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetGameModuleInstances``1(System.String,System.String)">
            <summary>
            此方法使用 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 取得一个实体字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="module_name"></param>
            <param name="file_name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.CreateGameModuleEntityConfig``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            使用 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 构造一个实体字典并保存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="module_name"></param>
            <param name="file_name"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.RegisterFactory(Milimoe.FunGame.Core.Api.Utility.Factory.SQLHelperFactoryDelegate)">
            <summary>
            注册工厂方法 [SQLHelper]
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetSQLHelper">
            <summary>
            构造一个 SQLHelper 实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.RegisterFactory(Milimoe.FunGame.Core.Api.Utility.Factory.MailSenderFactoryDelegate)">
            <summary>
            注册工厂方法 [MailSender]
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetMailSender">
            <summary>
            构造一个 MailSender 实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetCharacter">
            <summary>
            获取角色实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetInventory">
            <summary>
            获取库存实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetSkill">
            <summary>
            获取技能实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetEffect">
            <summary>
            获取技能特效实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetItem">
            <summary>
            获取物品实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRoom(System.Int64,System.String,System.Nullable{System.DateTime},Milimoe.FunGame.Core.Entity.User,Milimoe.FunGame.Core.Library.Constant.RoomType,System.String,System.String,Milimoe.FunGame.Core.Library.Constant.RoomState,System.Boolean,System.String,System.Int32)">
            <summary>
            获取房间实例
            </summary>
            <param name="id">房间内部序列号</param>
            <param name="roomid">房间号</param>
            <param name="createTime">创建时间</param>
            <param name="roomMaster">房主</param>
            <param name="roomType">房间类型</param>
            <param name="gameModule">游戏模组</param>
            <param name="gameMap"></param>
            <param name="roomState">房间状态</param>
            <param name="isRank"></param>
            <param name="password">房间密码</param>
            <param name="maxUsers">人数上限</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRoom(System.Data.DataRow,Milimoe.FunGame.Core.Entity.User)">
            <summary>
            通过DataSet获取房间实例
            </summary>
            <param name="drRoom"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRooms(System.Data.DataSet,System.Data.DataSet)">
            <summary>
            通过DataSet获取房间列表
            </summary>
            <param name="dsRoom"></param>
            <param name="dsUser"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetHall">
            <summary>
            获取大厅（-1号房）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser">
            <summary>
            获取用户实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Int64,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.String)">
            <summary>
            获取用户实例
            </summary>
            <param name="Id"></param>
            <param name="Username"></param>
            <param name="RegTime"></param>
            <param name="LastTime"></param>
            <param name="Email"></param>
            <param name="NickName"></param>
            <param name="IsAdmin"></param>
            <param name="IsOperator"></param>
            <param name="IsEnable"></param>
            <param name="GameTime"></param>
            <param name="AutoKey"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Data.DataSet)">
            <summary>
            获取用户实例
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Data.DataRow)">
            <summary>
            获取用户实例
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Modules">
            <summary>
            适用于客户端的模组集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.ModuleServers">
            <summary>
            适用于服务器的模组集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Maps">
            <summary>
            游戏地图集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Characters">
            <summary>
            角色表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Skills">
            <summary>
            技能表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Items">
            <summary>
            物品表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.ModuleFilePaths">
            <summary>
            已加载的模组DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.LoadGameModules(Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            传入 <see cref="T:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame"/> 类型来创建指定端的模组读取器
            <para>runtime = <see cref="F:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame.FunGame_Desktop"/> 时，仅读取 <seealso cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Modules"/></para>
            <para>runtime = <see cref="F:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame.FunGame_Server"/> 时，仅读取 <seealso cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.ModuleServers"/></para>
            <seealso cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Maps"/> 都会读取
            </summary>
            <param name="runtime">传入 <see cref="T:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame"/> 类型来创建指定端的模组读取器</param>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.AddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Item(System.String)">
            <summary>
            获取对应名称的模组实例
            <para>如果需要取得服务器模组的实例，请调用 <see cref="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetServerMode(System.String)"/></para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetServerMode(System.String)">
            <summary>
            获取对应名称的服务器模组实例
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetGameMap(System.String)">
            <summary>
            获取对应名称的游戏地图
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.NetworkUtility">
            <summary>
            网络服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsIP(System.String)">
            <summary>
            判断字符串是否是IP地址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsEmail(System.String)">
            <summary>
            判断字符串是否为邮箱地址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsUserName(System.String)">
            <summary>
            判断字符串是否是正常的用户名（只有中英文和数字）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsChineseName(System.String)">
            <summary>
            判断字符串是否是全中文的字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetUserNameLength(System.String)">
            <summary>
            获取用户名长度
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsServerAddress(System.String,System.String@,System.Int32@)">
            <summary>
            判断字符串是否是一个FunGame可接受的服务器地址<para/>
            此方法可以解析域名
            </summary>
            <param name="str"></param>
            <param name="addr"></param>
            <param name="port"></param>
            <returns>返回地址验证结果，同时输出服务器地址和端口号</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsServerAddress(System.String,System.Int32)">
            <summary>
            判断参数是否是一个FunGame可接受的服务器地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetServerPing(System.String)">
            <summary>
            获取服务器的延迟
            </summary>
            <param name="addr">服务器IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetIPAddress(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            解析域名为IP地址
            </summary>
            <param name="domain"></param>
            <param name="family"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonSerialize``1(``0)">
            <summary>
            返回目标对象的Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonSerialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            返回目标对象的Json字符串 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象 使用 <paramref name="reader"/> 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromHashtable``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashtable"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromDictionary``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            反序列化Dictionary中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化IEnumerable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromHashtable``1(System.Collections.Hashtable,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Hashtable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashtable"></param>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.HttpGet``1(System.String)">
            <summary>
            发送 GET 请求
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.HttpPost``1(System.String,System.String)">
            <summary>
            发送 POST 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility">
            <summary>
            时间服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTime(Milimoe.FunGame.Core.Library.Constant.TimeType)">
            <summary>
            获取系统时间
            </summary>
            <param name="type">格式化类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTime(System.String)">
            <summary>
            通过字符串转换为DateTime对象
            </summary>
            <param name="format">时间字符串</param>
            <returns>转换失败返回当前时间</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTimeToString(Milimoe.FunGame.Core.Library.Constant.TimeType)">
            <summary>
            获取系统时间并转为字符串
            </summary>
            <param name="type">格式化类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTimeToString(System.String)">
            <summary>
            获取系统时间并转为字符串
            </summary>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetNowShortTime">
            <summary>
            获取系统短时间
            </summary>
            <returns>时:分:秒</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetNowTime">
            <summary>
            获取系统日期
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetBuiltTime(System.String)">
            <summary>
            获取 DLL 编译时间
            </summary>
            <param name="dll"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetTradableTime(System.Nullable{System.DateTime})">
            <summary>
            获取下一次可交易的时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Encryption">
            <summary>
            加密服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.HmacSha512(System.String,System.String)">
            <summary>
            使用 HMAC-SHA512 算法对文本进行加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="key">用于加密的秘钥</param>
            <returns>加密后的 HMAC-SHA512 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.HmacSha256(System.String,System.String)">
            <summary>
            使用 HMAC-SHA256 算法对文本进行加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="key">用于加密的秘钥</param>
            <returns>加密后的 HMAC-SHA256 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.Sha256(System.String)">
            <summary>
            使用 SHA256 算法对文本进行加密
            </summary>
            <param name="text">需要加密的文本</param>
            <returns>加密后的 SHA256 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.FileSha256(System.String)">
            <summary>
            计算文件的 SHA-256 哈希值
            </summary>
            <param name="file_path">要计算哈希值的文件路径</param>
            <returns>文件的 SHA-256 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.RSAEncrypt(System.String,System.String)">
            <summary>
            使用 RSA 算法加密
            </summary>
            <param name="plain_text">明文</param>
            <param name="plublic_key">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.RSADecrypt(System.String,System.String)">
            <summary>
            使用 RSA 算法解密
            </summary>
            <param name="secret_text">密文</param>
            <param name="private_key">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.MD5(System.String)">
            <summary>
            使用 MD5 算法加密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.GenerateRandomString(System.Int32)">
            <summary>
            生成随机字符串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Verification">
            <summary>
            验证码服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.CreateVerifyCode(Milimoe.FunGame.Core.Library.Constant.VerifyCodeType,System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.NumberVerifyCode(System.Int32)">
            <summary>
            数字验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.LetterVerifyCode(System.Int32)">
            <summary>
            字母验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.MixVerifyCode(System.Int32)">
            <summary>
            混合验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Api.Utility.WebAPIAuthenticator.WebAPICustomBearerTokenAuthenticator">
            <summary>
            Web API 自定义 Token 验证器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.WebAPIAuthenticator.AddCustomBearerTokenHandler(System.Func{System.String,System.String})">
            <summary>
            添加自定义 Token 验证器
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.WebAPIAuthenticator.ValidateToken(System.String)">
            <summary>
            对自定义 Token 进行验证
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.TaskUtility">
            <summary>
            多线程服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.NewTask(System.Action)">
            <summary>
            开启一个异步任务。调用返回对象的 OnCompleted() 方法可以执行后续操作
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.NewTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            开启一个异步任务。调用返回对象的 OnCompleted() 方法可以执行后续操作
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.RunTimer(System.Action,System.Int32)">
            <summary>
            开启一个计时器任务
            </summary>
            <param name="action"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.AddSchedulerTask(System.String,System.DateTime,System.Action)">
            <summary>
            添加任务计划，使用 <paramref name="time"/> 的时分秒。如果用 <see cref="T:System.TimeSpan"/>，请直接在 <see cref="P:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.Shared"/> 中添加
            </summary>
            <param name="name"></param>
            <param name="time"></param>
            <param name="action"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.AddRecurringTask(System.String,System.Int32,System.Action,System.Int32,System.Int32,System.Boolean)">
            <summary>
            添加循环任务。如果用 <see cref="T:System.TimeSpan"/>，请直接在 <see cref="P:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.Shared"/> 中添加
            </summary>
            <param name="name"></param>
            <param name="seconds"></param>
            <param name="action"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="startNow"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Calculation">
            <summary>
            计算服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round(System.Double,System.Int32)">
            <summary>
            四舍五入计算
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round2Digits(System.Double)">
            <summary>
            四舍五入保留2位小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round4Digits(System.Double)">
            <summary>
            四舍五入保留4位小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.PercentageCheck(System.Double)">
            <summary>
            此方法检查一个 百分比(%) 数值是否存在于 [0,1] 区间
            </summary>
            <param name="value"></param>
            <returns>如果低于0，则返回0；超过1则返回1。</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.IsApproximatelyZero(System.Double,System.Double)">
            <summary>
            检查 <paramref name="value"/> 是否约等于 0
            </summary>
            <param name="value"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Implement">
            <summary>
            See: <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/>, <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/>, <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetFunGameImplementType(System.Reflection.Assembly,Milimoe.FunGame.Core.Library.Constant.InterfaceType)">
            <summary>
            获取FunGame.Implement.dll中接口的实现方法
            </summary>
            <param name="Assembly">程序集</param>
            <param name="Interface">接口代号</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetImplementClassName(Milimoe.FunGame.Core.Library.Constant.InterfaceType)">
            <summary>
            获取接口实现类类名
            </summary>
            <param name="Interface">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetImplementMethodName(Milimoe.FunGame.Core.Library.Constant.InterfaceMethod)">
            <summary>
            获取接口方法名（支持属性）
            </summary>
            <param name="Method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetFunGameImplValue(Milimoe.FunGame.Core.Library.Constant.InterfaceType,Milimoe.FunGame.Core.Library.Constant.InterfaceMethod,System.Boolean)">
            <summary>
            公开方法：获取FunGame.Implement.DLL中指定方法（属性）的返回值
            </summary>
            <param name="Interface">接口代号</param>
            <param name="Method">方法代号（支持属性）</param>
            <param name="IsMethod">是否是方法（如是属性请传入false）</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.JsonTool">
            <summary>
            Json工具类<para/>
            此工具类拥有单独的序列化选项，支持添加自定义转换器 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/><para/>
            <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/> 继承自 <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.JsonTool.JsonSerializerOptions">
            <summary>
            默认的序列化选项
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.JsonTool.Options">
            <summary>
            序列化选项
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.#ctor">
            <summary>
            创建一个Json工具类<para/>
            此工具类拥有单独的序列化选项，支持添加自定义转换器 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/><para/>
            <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/> 继承自 <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.AddConverter(System.Text.Json.Serialization.JsonConverter)">
            <summary>
            注册一个自定义转换器，支持 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/>
            </summary>
            <param name="converter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.AddConverters(System.Collections.Generic.IEnumerable{System.Text.Json.Serialization.JsonConverter})">
            <summary>
            注册多个自定义转换器，支持 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/>
            </summary>
            <param name="converters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetString``1(``0)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject(System.String)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            反序列化Dictionary中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObjects``1(System.String)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.NovelConfig">
            <summary>
            视觉小说文本配置器<para/>
            <para/>文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath"/>(通常是 novels)/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.NovelName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath"/>(通常是 novels)/<paramref name="novel_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="novel_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.#ctor(System.String,System.String)">
            <summary>
            视觉小说文本配置器<para/>
            <para/>文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath"/>(通常是 novels)/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.NovelName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath"/>(通常是 novels)/<paramref name="novel_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="novel_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath">
            <summary>
            配置文件存放的根目录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.Readonly">
            <summary>
            是否允许 <see cref="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.SaveConfig"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.NovelName">
            <summary>
            模组的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.FileName">
            <summary>
            配置文件的名称（后缀将是.json）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.Predicates">
            <summary>
            断言方法字典<para/>
            <see cref="T:Milimoe.FunGame.Core.Model.NovelNode"/> 和 <see cref="T:Milimoe.FunGame.Core.Model.NovelOption"/> 都有显示的条件，反序列化 json 文件时，会根据其名称来分配具体的断言方法
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.Item(System.String)">
            <summary>
            使用索引器给指定key赋值，不存在key会新增
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.Get(System.String)">
            <summary>
            获取指定key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.Add(System.String,Milimoe.FunGame.Core.Model.NovelNode)">
            <summary>
            添加一个配置，如果已存在key会覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.LoadFrom(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Func{System.Boolean}})">
            <summary>
            从指定路径加载配置文件，并根据其文件名，转换为本框架所需的文件<para/>
            <paramref name="copyToRootPath"/> 为 false 时将不会复制此文件至配置文件目录并且不允许 <see cref="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.SaveConfig"/><para/>
            需要注意：<paramref name="checkConflict"/> 用于检查加载的文件名是否在配置文件目录中已经存在<para/>
            如果不使用此检查，使用 <see cref="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.SaveConfig"/> 时可能会覆盖原有文件（程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.NovelConfig.RootPath"/>(通常是 novels)/<paramref name="novelName"/>/[所选的文件名].json）
            </summary>
            <param name="path"></param>
            <param name="novelName"></param>
            <param name="copyToRootPath"></param>
            <param name="checkConflict"></param>
            <param name="predicates"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.IO.InvalidDataException" />
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.LoadConfig(System.Collections.Generic.Dictionary{System.String,System.Func{System.Boolean}})">
            <summary>
            从配置文件中读取配置。
            </summary>
            <param name="predicates">传入定义好的条件字典</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.LoadConfig(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Model.NovelNode},System.Collections.Generic.Dictionary{System.String,System.Func{System.Boolean}})">
            <summary>
            根据断言方法字典重新生成小说的字典
            </summary>
            <param name="dict"></param>
            <param name="predicates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.SaveConfig">
            <summary>
            将配置保存到配置文件。调用此方法会覆盖原有的.json，请注意备份
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.ExistsDirectory(System.String)">
            <summary>
            检查配置文件目录是否存在
            </summary>
            <param name="novelName"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.ExistsDirectoryAndCreate(System.String)">
            <summary>
            检查配置文件目录是否存在，不存在则创建
            </summary>
            <param name="novelName"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NovelConfig.ExistsFile(System.String,System.String)">
            <summary>
            检查配置文件目录中是否存在指定文件
            </summary>
            <param name="novelName"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.PluginConfig">
            <summary>
            简易的插件配置文件生成器<para/>
            仅支持部分基本类型（<see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>）及其数组（<see cref="T:System.Collections.Generic.List`1">List&lt;long&gt;, List&lt;double&gt;, List&lt;decimal&gt;, List&lt;string&gt;, List&lt;bool&gt;</see>和<see cref="T:System.Array">long[], double[], decimal[], string[], bool[]</see>）
            <para/>文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.RootPath"/>(通常是 configs)/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.RootPath"/>(通常是 configs)/<paramref name="plugin_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="plugin_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.#ctor(System.String,System.String)">
            <summary>
            简易的插件配置文件生成器<para/>
            仅支持部分基本类型（<see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>）及其数组（<see cref="T:System.Collections.Generic.List`1">List&lt;long&gt;, List&lt;double&gt;, List&lt;decimal&gt;, List&lt;string&gt;, List&lt;bool&gt;</see>和<see cref="T:System.Array">long[], double[], decimal[], string[], bool[]</see>）
            <para/>文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.RootPath"/>(通常是 configs)/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.RootPath"/>(通常是 configs)/<paramref name="plugin_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="plugin_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.RootPath">
            <summary>
            配置文件存放的根目录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName">
            <summary>
            插件的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName">
            <summary>
            配置文件的名称（后缀将是.json）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Item(System.String)">
            <summary>
            使用索引器给指定key赋值，不存在key会新增
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Parse``1(System.String)">
            <summary>
            如果保存了对象，请使用此方法转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.GetValue(System.String)">
            <summary>
            获取指定key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Get``1(System.String)">
            <summary>
            使用泛型获取指定key的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Add(System.String,System.Object)">
            <summary>
            添加一个配置，如果已存在key会覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.LoadConfig">
            <summary>
            从配置文件中读取配置。
            注意：所有保存时为数组的对象都会变成<see cref="T:System.Collections.Generic.List`1"/>对象，并且不支持<see cref="T:System.Object"/>类型
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.SaveConfig">
            <summary>
            将配置保存到配置文件。调用此方法会覆盖原有的.json，请注意备份
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.AddValue(System.String,System.Text.Json.JsonElement)">
            <summary>
            Json反序列化的方法
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.AddValues(System.String,System.Text.Json.JsonElement.ArrayEnumerator)">
            <summary>
            JSON 数组反序列化的方法，支持特定类型数组和混合类型数组（包括嵌套对象和数组）。
            </summary>
            <param name="key">字典的键</param>
            <param name="obj">JSON 数组的枚举器</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.ParseObject(System.Text.Json.JsonElement)">
            <summary>
            递归解析 JSON 对象
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.ParseArray(System.Text.Json.JsonElement)">
            <summary>
            递归解析 JSON 数组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginLoader.Plugins">
            <summary>
            已读取的插件列表
            <para>key 是 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Name"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginLoader.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginLoader.LoadPlugins(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            构建一个插件读取器并读取插件
            </summary>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.AddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ServerPluginLoader.Plugins">
            <summary>
            已读取的插件列表
            <para>key 是 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Name"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ServerPluginLoader.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ServerPluginLoader.LoadPlugins(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            构建一个插件读取器并读取插件
            </summary>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.BaseAddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Singleton">
            <summary>
            单例表：表中的对象以类名作为Key保存，并以Key获取该对象，Key具有唯一约束
            用于储存单例对象使用
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.IsExist(System.Object)">
            <summary>
            查询目标的类是否已经有实例
            </summary>
            <param name="single">单例对象</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.AddOrUpdate(System.Object,System.Boolean)">
            <summary>
            将目标和目标的类添加至单例表，如果存在，将更新此类单例
            </summary>
            <param name="single">单例对象</param>
            <param name="baseClass">存入基类</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Remove(System.Object)">
            <summary>
            将目标和目标的类从单例表中移除
            </summary>
            <param name="single">单例对象</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Get``1">
            <summary>
            获取单例对象
            </summary>
            <typeparam name="T">目标类</typeparam>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Get(System.Type)">
            <summary>
            获取单例对象
            </summary>
            <param name="type">目标类</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.StringExtension">
            <summary>
            为字符串（string）添加扩展方法
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.StringExtension.Encrypt(System.String,System.String)">
            <summary>
            使用 HMAC-SHA512 算法对文本进行加密<para/>
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="key">用于加密的秘钥</param>
            <returns>加密后的 HMAC-SHA512 哈希值</returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.Shared">
            <summary>
            任务计划管理器实例，可以直接使用
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.#ctor">
            <summary>
            创建一个轻量级的任务计划管理器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.AddTask(System.String,System.TimeSpan,System.Action,System.Action{System.Exception})">
            <summary>
            添加一个任务计划
            </summary>
            <param name="name"></param>
            <param name="timeOfDay"></param>
            <param name="action"></param>
            <param name="error"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.AddRecurringTask(System.String,System.TimeSpan,System.Action,System.Boolean,System.Action{System.Exception})">
            <summary>
            添加一个循环任务
            </summary>
            <param name="name"></param>
            <param name="interval"></param>
            <param name="action"></param>
            <param name="startNow"></param>
            <param name="error"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.RemoveTask(System.String)">
            <summary>
            移除任务计划
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.GetLastTime(System.String,System.Boolean)">
            <summary>
            获取任务计划上一次执行时间
            </summary>
            <param name="name"></param>
            <param name="recurring"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.GetNextTime(System.String,System.Boolean)">
            <summary>
            获取任务计划下一次执行时间
            </summary>
            <param name="name"></param>
            <param name="recurring"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskScheduler.CheckAndRunTasks">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.INIHelper.DefaultFileName">
            <summary>
            默认的配置文件名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.WriteINI(System.String,System.String,System.String,System.String)">
            <summary>
            写入ini文件
            </summary>
            <param name="Section">Section</param>
            <param name="Key">键</param>
            <param name="Value">值</param>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.ReadINI(System.String,System.String,System.String)">
            <summary>
            读取ini文件
            </summary>
            <param name="Section">Section</param>
            <param name="Key">键</param>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
            <returns>读取到的值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.ExistINIFile(System.String)">
            <summary>
            查询ini文件是否存在
            </summary>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.Init(Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame)">
            <summary>
            初始化ini模板文件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.ReadTXT(System.String,System.String)">
            <summary>
            读取TXT文件内容
            </summary>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
            <returns>内容</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.WriteTXT(System.String,System.String,System.String,System.Boolean)">
            <summary>
            写入TXT文件内容（如不存在文件会创建）<para/>
            <paramref name="overwrite" /> 选项用于覆盖或追加文本
            </summary>
            <param name="content"></param>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
            <param name="overwrite">是否覆盖</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.OverwriteTXT(System.String,System.String,System.String)">
            <summary>
            写入并覆盖TXT文件内容
            </summary>
            <param name="content"></param>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.AppendErrorLog(System.String)">
            <summary>
            追加错误日志 默认写入logs文件夹下的当日日期.log文件
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.AppendErrorLog(System.Exception)">
            <summary>
            追加错误日志 默认写入logs文件夹下的当日日期.log文件
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator">
            <summary>
            Aka. 2FA 双重认证 双因素身份验证
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SQLHelper">
            <summary>
            SQLHelper 允许为空
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.#ctor">
            <summary>
            不使用SQL模式
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.#ctor(Milimoe.FunGame.Core.Api.Transmittal.SQLHelper)">
            <summary>
            使用SQL模式 记录对应账号的密文到数据库中
            </summary>
            <param name="SQLHelper"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.IsAvailable(System.String)">
            <summary>
            检查账号是否需要2FA
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Authenticate(System.String,System.String)">
            <summary>
            2FA验证
            </summary>
            <param name="username"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.INTERVAL_SECONDS">
            <summary>
            每30秒刷新
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.DIGITS">
            <summary>
            6位数字2FA验证码
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.PUBLICKEY">
            <summary>
            ----- PUBLIC KEY -----
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SECRETSIGN">
            <summary>
            ----- SECRET SIGN -----
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.CreateSecretKey(System.String)">
            <summary>
            创键私钥，用于绑定账号，并生成两个文件，需要用户保存
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Base32Encode(System.Byte[])">
            <summary>
            生成随机秘钥字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.GenerateCode(System.String)">
            <summary>
            生成基于当前时间戳的6位数字2FA验证码
            </summary>
            <param name="secretKey"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.GetCurrentCounter">
            <summary>
            获取当前时间节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Base32Decode(System.String)">
            <summary>
            生成验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SplitKeyFile(System.String,System.String[]@)">
            <summary>
            拆分字符串中的密文和私钥
            </summary>
            <param name="content"></param>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.WebAPIPluginLoader.Plugins">
            <summary>
            已读取的插件列表
            <para>key 是 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Name"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.WebAPIPluginLoader.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.WebAPIPluginLoader.LoadPlugins(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            构建一个插件读取器并读取插件
            </summary>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.BaseAddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.AddonController`1">
            <summary>
            这个控制器在 Base 的基础上添加了 DataRequest
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewDataRequest">
            <summary>
            基于本地已连接的Socket创建新的数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewLongRunningDataRequest">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewGamingRequest">
            <summary>
            基于本地已连接的Socket创建新的局内数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewLongRunningGamingRequest">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内数据请求
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求<para/>
            此方法只允许插件调用，如果是模组和模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求<para/>
            此方法只允许插件调用，如果是模组和模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的，但是 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> 也能调用<para/>
            模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的，但是 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> 也能调用<para/>
            模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.#ctor(Milimoe.FunGame.Core.Interface.Addons.IAddon,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            新建一个AddonController
            </summary>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.DecideAIActionAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            AI的核心决策方法，根据当前游戏状态为角色选择最佳行动。
            </summary>
            <param name="character">当前行动的AI角色。</param>
            <param name="startGrid">角色的起始格子。</param>
            <param name="allPossibleMoveGrids">从起始格子可达的所有移动格子（包括起始格子本身）。</param>
            <param name="availableSkills">角色所有可用的技能（已过滤CD和EP/MP）。</param>
            <param name="availableItems">角色所有可用的物品（已过滤CD和EP/MP）。</param>
            <param name="allEnemysInGame">场上所有敌人。</param>
            <param name="allTeammatesInGame">场上所有队友。</param>
            <returns>包含最佳行动的AIDecision对象。</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.SelectTargets(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Interface.Entity.ISkill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            选择技能的最佳目标
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.EvaluateNormalAttack(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            评估普通攻击的价值
            </summary>
            <param name="character"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.EvaluateSkill(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Double)">
            <summary>
            评估技能的价值
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
            <param name="targets"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.EvaluateItem(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Double)">
            <summary>
            评估物品的价值
            </summary>
            <param name="character"></param>
            <param name="item"></param>
            <param name="targets"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AIController.CalculateTargetValue(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Interface.Entity.ISkill)">
            <summary>
            辅助函数：计算单个目标在某个技能下的价值
            </summary>
            <param name="target"></param>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.BaseAddonController`1">
            <summary>
            这是通用的控制器，仅提供基本功能
            </summary>
            <typeparam name="T">Addon的类型，如 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 或者 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin"/></typeparam>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.Addon">
            <summary>
            控制器的本体
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.MaskMethod_WriteLine">
            <summary>
            输出系统消息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.MaskMethod_Error">
            <summary>
            输出错误消息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.WriteLine(System.String,Milimoe.FunGame.Core.Library.Constant.LogLevel,System.Boolean)">
            <summary>
            输出系统消息
            </summary>
            <param name="msg"></param>
            <param name="level"></param>
            <param name="useLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.Error(System.Exception)">
            <summary>
            输出错误消息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.JSON">
            <summary>
            JSON 工具类对象
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.#ctor(Milimoe.FunGame.Core.Interface.Addons.IAddon,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            新建一个BaseAddonController
            </summary>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.DefaultPrint(System.String,System.String,Milimoe.FunGame.Core.Library.Constant.LogLevel,System.Boolean)">
            <summary>
            默认的输出错误消息方法
            </summary>
            <param name="name"></param>
            <param name="msg"></param>
            <param name="level"></param>
            <param name="useLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.DefaultPrint(System.Exception)">
            <summary>
            输出错误消息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.RunTimeController">
            <summary>
            此类实现服务器连接、断开连接、心跳检测、创建数据请求等功能
            -- 需要继承并实现部分方法 --
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.RunTimeController.Socket">
            <summary>
            与服务器的连接套接字实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.RunTimeController.HTTPClient">
            <summary>
            与服务器的连接套接字实例（WebSocket）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.RunTimeController.Connected">
            <summary>
            套接字是否已经连接
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._ReceivingTask">
            <summary>
            接收服务器信息的线程
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._Socket">
            <summary>
            用于类内赋值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._HTTPClient">
            <summary>
            用于类内赋值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._IsReceiving">
            <summary>
            是否正在接收服务器信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Disconnect">
            <summary>
            断开服务器连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.EndGame">
            <summary>
            发送结束游戏反馈
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Connect(Milimoe.FunGame.Core.Library.Constant.TransmittalType,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            连接服务器 [ 可选参数需要根据连接方式提供 ]
            建议使用异步版，此方法为兼容性处理
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="ssl"></param>
            <param name="subUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.ConnectAsync(Milimoe.FunGame.Core.Library.Constant.TransmittalType,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            连接服务器 [ 异步版，可选参数需要根据连接方式提供 ]
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="ssl"></param>
            <param name="subUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Connect_Socket(System.Collections.ArrayList,System.String,System.Int32)">
            <summary>
            使用 Socket 方式连接服务器
            </summary>
            <param name="connectArgs"></param>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Connect_WebSocket(System.Collections.ArrayList,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            使用 WebSocket 方式连接服务器
            </summary>
            <param name="connectArgs"></param>
            <param name="address"></param>
            <param name="ssl"></param>
            <param name="port"></param>
            <param name="subUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.GetServerAddress">
            <summary>
            获取服务器地址
            </summary>
            <returns>string：服务器地址；int：端口号</returns>
            <exception cref="T:Milimoe.FunGame.FindServerFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.BeforeConnect(System.String@,System.Int32@,System.Collections.ArrayList)">
            <summary>
            此方法将在连接服务器前触发<para/>
            客户端可以重写此方法
            </summary>
            <param name="address">服务器地址</param>
            <param name="port">服务器端口</param>
            <param name="args">重写时可以提供额外的连接参数</param>
            <returns>false：中止连接</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.AfterConnect(System.Collections.ArrayList)">
            <summary>
            此方法将在连接服务器后触发（Connect结果返回前）<para/>
            客户端可以重写此方法
            </summary>
            <param name="ConnectArgs">连接服务器后返回的一些数据，可以使用也可以修改它们</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.AutoLogin(System.String,System.String,System.String)">
            <summary>
            客户端需要自行实现自动登录的事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Close_Socket">
            <summary>
            关闭 Socket 连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Close_WebSocket">
            <summary>
            关闭 WebSocket 连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.WritelnSystemInfo(System.String,Milimoe.FunGame.Core.Library.Constant.LogLevel,System.Boolean)">
            <summary>
            输出消息
            </summary>
            <param name="msg"></param>
            <param name="level"></param>
            <param name="useLevel"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Error(System.Exception)">
            <summary>
            自定处理异常的方法
            -- 一般放在catch中 --
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求<para/>
            加载项专用（<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/>）
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            加载项专用（<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/>）
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            加载项专用：此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="GamingType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            加载项专用：此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="GamingType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.StartReceiving">
            <summary>
            开始接收服务器信息 [ Socket Only ]
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.GetServerMessages">
            <summary>
            获取服务器已发送的信息为SocketObject数组 [ Socket Only ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Receiving">
            <summary>
            具体接收服务器信息以及处理信息的方法 [ Socket Only ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.HandleSocketMessage(Milimoe.FunGame.Core.Library.Constant.TransmittalType,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            处理接收到的信息
            </summary>
            <param name="transmittalType"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Disconnect(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收服务器断开连接的通知
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_System(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理服务器系统消息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_HeartBeat(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理服务器心跳
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_ForceLogout(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收强制退出登录的通知
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Chat(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理聊天信息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_UpdateRoomMaster(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理更换房主信息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_MatchRoom(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理匹配房间成功信息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_StartGame(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理开始游戏信息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_EndGame(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理游戏结束信息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Gaming(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理局内消息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_AnonymousGameServer(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理匿名服务器的消息
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.ServerAddonController`1">
            <summary>
            这个控制器在 Base 的基础上添加了 SQLHelper 和 MailSender
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            新建一个ServerAddonController
            </remarks>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.#ctor(Milimoe.FunGame.Core.Interface.Addons.IAddon,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            这个控制器在 Base 的基础上添加了 SQLHelper 和 MailSender
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            新建一个ServerAddonController
            </remarks>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.ServerAddonController`1.SQLHelper">
            <summary>
            数据库连接器 [ 后台长连接仅查询专用，请勿用于事务、更新和新增，对应需求请使用：<see cref="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.GetSQLHelper"/> ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.ServerAddonController`1.MailSender">
            <summary>
            邮件发送器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.GetSQLHelper">
            <summary>
            获取一个可以用来进行事务操作、更新/新增数据的数据库连接器 [ 请使用 using Controller.GetSQLHelper() 来让它能够自动释放 ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.NewSQLHelper">
            <summary>
            新建 SQLHelper [ 后台长连接仅查询专用，请勿用于事务、更新和新增，对应需求请使用：<see cref="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.GetSQLHelper"/> ]
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.NewMailSender">
            <summary>
            新建 MailSender
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.ServerAddonController`1.Close">
            <summary>
            关闭插件的服务
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.SocketHandlerController">
            <summary>
            <para>继承 AsyncAwaiter 用法：</para>
            <para>1、调用Socket.Send()前，请设置为等待状态：SetWorking();</para>
            <para>2、调用Socket.Send() == Success后，请等待任务完成：WaitForWorkDone();</para>
            <para>3、在其他任何地方修改Working状态，均会使任务终止。</para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.SocketHandlerController.ReceivedObject">
            <summary>
            接收到的SocketObject实例
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController._socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController._webSocket">
            <summary>
            WebSocket
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket)">
            <summary>
            继承请调用base构造
            </summary>
            <param name="socket">Socket</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient)">
            <summary>
            继承请调用base构造
            </summary>
            <param name="websocket">Socket</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.SocketHandler(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            继承请重写此方法
            </summary>
            <param name="SocketObject">SocketObject</param>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController._isDisposed">
            <summary>
            判断是否已经Disposed
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.Dispose">
            <summary>
            公开的Dispose方法
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.Dispose(System.Boolean)">
            <summary>
            关闭时
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.SocketHandlerController.DisposedEvent">
            <summary>
            关闭事件
            </summary>
        </member>
        <member name="E:Milimoe.FunGame.Core.Controller.SocketHandlerController.Disposed">
            <summary>
            <para>Controller关闭时事件</para>
            <para>不建议new Dispose()方法，建议使用事件</para>
            <para>事件会在base.Dispose()执行前触发</para>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.OnDisposed">
            <summary>
            触发关闭事件
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Id">
            <summary>
            实体的数字 ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Guid">
            <summary>
            实体的唯一 ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Name">
            <summary>
            实体的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.EntityState">
            <summary>
            实体的当前状态（关联数据库操作）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.GameplayEquilibriumConstant">
            <summary>
            实体所用的游戏平衡常数
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.BaseEntity.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较两个实体是否相同
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.BaseEntity.GetIdName">
            <summary>
            获取实体的 Id.Name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.AssistDetail">
            <summary>
            用于记录对哪个角色造成了多少伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.Character">
            <summary>
            此详情类属于哪个角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.Damages">
            <summary>
            对敌人造成的伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.DamageLastTime">
            <summary>
            最后一次造成伤害的时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.NotDamageAssistLastTime">
            <summary>
            对某角色最后一次友方非伤害辅助的时间
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.#ctor(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            初始化一个助攻详情类
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.Item(Milimoe.FunGame.Core.Entity.Character,System.Nullable{System.Double})">
            <summary>
            获取和设置对 <paramref name="enemy"/> 的伤害，并设置时间
            </summary>
            <param name="enemy"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.GetPercentage(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取对 <paramref name="enemy"/> 的伤害
            </summary>
            <param name="enemy"></param>
            <returns>目标的 <see cref="P:Milimoe.FunGame.Core.Entity.Character.MaxHP"/> 的百分比形式</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.GetLastTime(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取对 <paramref name="enemy"/> 造成伤害的最后时间
            </summary>
            <param name="enemy"></param>
            <returns><see cref="F:System.Double.MinValue"/> 意味着没有时间</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.GetNotDamageAssistLastTime(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取对某角色友方非伤害辅助的最后时间
            </summary>
            <param name="character"></param>
            <returns><see cref="F:System.Double.MinValue"/> 意味着没有时间</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Character">
            <summary>
            角色需要使用 Factory.Get 的方式来构造，并赋值 <see cref="T:Milimoe.FunGame.Core.Api.Utility.InitRequired"/> 标记的属性<para />
            在使用时仅需要调用 <see cref="M:Milimoe.FunGame.Core.Entity.Character.Copy(System.Boolean,System.Boolean,System.Boolean)"/> 方法即可获得相同对象<para />
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Guid">
            <summary>
            唯一标识符
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Name">
            <summary>
            角色的姓
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.FirstName">
            <summary>
            角色的名字
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.NickName">
            <summary>
            角色的昵称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.User">
            <summary>
            角色所属的玩家
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Profile">
            <summary>
            角色的详细资料
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EquipSlot">
            <summary>
            角色的装备
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MagicType">
            <summary>
            魔法属性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.FirstRoleType">
            <summary>
            角色定位1
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.SecondRoleType">
            <summary>
            角色定位2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ThirdRoleType">
            <summary>
            角色定位3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.RoleRating">
            <summary>
            角色评级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Promotion">
            <summary>
            晋升点数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PrimaryAttribute">
            <summary>
            核心属性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EXP">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.LevelBreak">
            <summary>
            等级突破进度 [ 对应 <see cref="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.LevelBreakList"/> 中的索引 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterState">
            <summary>
            角色目前所处的状态 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectStates">
            <summary>
            角色目前被特效施加的状态 [ 用于设置角色的状态，这些状态会影响角色的行动 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectTypes">
            <summary>
            角色目前被特效施加的控制效果 [ 用于特效在不同的钩子中更改角色的行为 ]
            <para/>我们需要明确控制效果不一定能造成角色的状态改变（影响角色的行动），但是这些控制状态需要由特效在不同的地方改变角色的行为
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterImmuneTypes">
            <summary>
            角色目前被特效施加的免疫状态 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.IsNeutral">
            <summary>
            角色是否是中立的 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.IsUnselectable">
            <summary>
            角色是否是不可选中的 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ImmuneType">
            <summary>
            角色是否具备免疫状态 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialHP">
            <summary>
            初始生命值 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseHP">
            <summary>
            基础生命值 [ 与初始设定和等级相关 ] [ 与基础力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHP">
            <summary>
            额外生命值 [ 与额外力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHP2">
            <summary>
            额外生命值2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHP3">
            <summary>
            额外生命值3 [ 额外生命值% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHPPercentage">
            <summary>
            额外生命值% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MaxHP">
            <summary>
            最大生命值 = 基础生命值 + 额外生命值 + 额外生命值2 + 额外生命值3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.HP">
            <summary>
            当前生命值 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.HasMP">
            <summary>
            是否有魔法值 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialMP">
            <summary>
            初始魔法值 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseMP">
            <summary>
            基础魔法值 [ 与初始设定和等级相关 ] [ 与基础智力相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMP">
            <summary>
            额外魔法值 [ 与额外智力相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMP2">
            <summary>
            额外魔法值2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMP3">
            <summary>
            额外魔法值3 [ 额外魔法值% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMPPercentage">
            <summary>
            额外魔法值% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MaxMP">
            <summary>
            最大魔法值 = 基础魔法值 + 额外魔法值 + 额外魔法值2 + 额外魔法值3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MP">
            <summary>
            当前魔法值 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EP">
            <summary>
            当前爆发能量 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialATK">
            <summary>
            初始攻击力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseATK">
            <summary>
            基础攻击力 [ 与初始设定和等级相关 ] [ 与核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATK">
            <summary>
            额外攻击力 [ 与额外核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATK2">
            <summary>
            额外攻击力2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATK3">
            <summary>
            额外攻击力3 [ 额外攻击力% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATKPercentage">
            <summary>
            额外攻击力% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ATK">
            <summary>
            攻击力 = 基础攻击力 + 额外攻击力 + 额外攻击力2 + 额外攻击力3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialDEF">
            <summary>
            初始物理护甲 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseDEF">
            <summary>
            基础物理护甲 [ 与初始设定相关 ] [ 与基础力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEF">
            <summary>
            额外物理护甲 [ 与额外力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEF2">
            <summary>
            额外物理护甲2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEF3">
            <summary>
            额外物理护甲3 [ 额外物理护甲% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEFPercentage">
            <summary>
            额外物理护甲% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.DEF">
            <summary>
            物理护甲 = 基础物理护甲 + 额外物理护甲 + 额外物理护甲2 + 额外物理护甲3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PDR">
            <summary>
            物理伤害减免(%) = [ 与物理护甲相关 ] + 额外物理伤害减免(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExPDR">
            <summary>
            额外物理伤害减免(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MDF">
            <summary>
            魔法抗性(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PhysicalPenetration">
            <summary>
            物理穿透(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MagicalPenetration">
            <summary>
            魔法穿透(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialHR">
            <summary>
            初始生命回复力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.HR">
            <summary>
            生命回复力 = [ 与初始设定相关 ] [ 与力量相关 ] + 额外生命回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHR">
            <summary>
            额外生命回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialMR">
            <summary>
            初始魔法回复力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MR">
            <summary>
            魔法回复力 = [ 与初始设定相关 ] [ 与智力相关 ] + 额外魔法回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMR">
            <summary>
            额外魔法回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ER">
            <summary>
            能量回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PrimaryAttributeValue">
            <summary>
            核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BasePrimaryAttributeValue">
            <summary>
            基础核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExPrimaryAttributeValue">
            <summary>
            额外核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialSTR">
            <summary>
            初始力量 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialAGI">
            <summary>
            初始敏捷 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialINT">
            <summary>
            初始智力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseSTR">
            <summary>
            基础力量 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseAGI">
            <summary>
            基础敏捷 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseINT">
            <summary>
            基础智力 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSTR">
            <summary>
            额外力量 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExAGI">
            <summary>
            额外敏捷 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExINT">
            <summary>
            额外智力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSTR2">
            <summary>
            额外力量2 [ 额外力量% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExAGI2">
            <summary>
            额外敏捷2 [ 额外敏捷% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExINT2">
            <summary>
            额外智力2 [ 额外智力% ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSTRPercentage">
            <summary>
            额外力量% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExAGIPercentage">
            <summary>
            额外敏捷% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExINTPercentage">
            <summary>
            额外智力% [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.STR">
            <summary>
            力量 = 基础力量 + 额外力量 + 额外力量2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AGI">
            <summary>
            敏捷 = 基础敏捷 + 额外敏捷 + 额外敏捷2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.INT">
            <summary>
            智力 = 基础智力 + 额外智力 + 额外智力2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.STRGrowth">
            <summary>
            力量成长值(+BaseSTR/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AGIGrowth">
            <summary>
            敏捷成长值(+BaseAGI/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.INTGrowth">
            <summary>
            智力成长值(+BaseINT/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialSPD">
            <summary>
            行动速度 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.SPD">
            <summary>
            行动速度 = [ 与初始设定相关 ][ 与敏捷相关 ] + 额外行动速度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSPD">
            <summary>
            额外行动速度 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ActionCoefficient">
            <summary>
            行动系数(%) = [ 与速度相关 ] + 额外行动系数(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExActionCoefficient">
            <summary>
            额外行动系数(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AccelerationCoefficient">
            <summary>
            加速系数(%) = [ 与智力相关 ] + 额外加速系数(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExAccelerationCoefficient">
            <summary>
            额外加速系数(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CDR">
            <summary>
            冷却缩减(%) = [ 与智力相关 ] + 额外冷却缩减(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCDR">
            <summary>
            额外冷却缩减(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ATR">
            <summary>
            攻击距离 [ 与武器相关 ] [ 单位：格（半径） ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATR">
            <summary>
            额外攻击距离 [ 与技能和物品相关 ] [ 单位：格（半径） ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MOV">
            <summary>
            行动力/可移动距离 [ 与第一定位相关 ] [ 单位：格（半径） ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMOV">
            <summary>
            行动力/可移动距离 [ 与技能和物品相关 ] [ 单位：格（半径） ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CritRate">
            <summary>
            暴击率(%) = [ 与敏捷相关 ] + 额外暴击率(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCritRate">
            <summary>
            额外暴击率(%)  [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CritDMG">
            <summary>
            暴击伤害(%) = [ 与力量相关 ] + 额外暴击伤害(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCritDMG">
            <summary>
            额外暴击伤害(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EvadeRate">
            <summary>
            闪避率(%) = [ 与敏捷相关 ] + 额外闪避率(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExEvadeRate">
            <summary>
            额外闪避率(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Lifesteal">
            <summary>
            生命偷取 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Shield">
            <summary>
            护盾值 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.NormalAttack">
            <summary>
            普通攻击对象
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Skills">
            <summary>
            角色的技能列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Effects">
            <summary>
            角色的持续性特效列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Items">
            <summary>
            角色携带的物品
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._Level">
            ===== 私有变量 =====
            <summary>
            等级
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._HP">
            <summary>
            生命值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._MP">
            <summary>
            魔法值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._EP">
            <summary>
            能量值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._PhysicalPenetration">
            <summary>
            物理穿透
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._MagicalPenetration">
            <summary>
            魔法穿透
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Double)">
            <summary>
            回复状态至满
            </summary>
            <param name="EP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Int32,System.Double)">
            <summary>
            按时间回复状态
            </summary>
            <param name="time"></param>
            <param name="EP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            按当前百分比回复状态（一般在属性变化时调用）
            </summary>
            <param name="pastHP"></param>
            <param name="pastMP"></param>
            <param name="pastMaxHP"></param>
            <param name="pastMaxMP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Equip(Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Library.Constant.EquipSlotType,Milimoe.FunGame.Core.Entity.Item@)">
            <summary>
            为角色装备物品（必须使用此方法而不是自己去给EquipSlot里的物品赋值）<para/>
            此方法装备到指定栏位，并返回被替换的装备（如果有的话）
            </summary>
            <param name="item"></param>
            <param name="slot"></param>
            <param name="previous"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Equip(Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            为角色装备物品（必须使用此方法而不是自己去给EquipSlot里的物品赋值）<para/>
            此方法为根据物品类型，优先空位自动装备
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Equip(Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Entity.Item@)">
            <summary>
            为角色装备物品（必须使用此方法而不是自己去给EquipSlot里的物品赋值）<para/>
            此方法为根据物品类型，优先空位自动装备<para/>
            此方法可返回被替换的装备（如果有的话）
            </summary>
            <param name="item"></param>
            <param name="previous"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.UnEquip(Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            取消装备，返回被取消的物品对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.SetLevel(System.Int32,System.Boolean)">
            <summary>
            设置角色等级，并默认完全回复状态
            </summary>
            <param name="level">新的等级</param>
            <param name="recovery">false 为按百分比回复</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.OnLevelUp(System.Int32,System.Boolean)">
            <summary>
            角色升级
            </summary>
            <param name="level"></param>
            <param name="checkLevelBreak"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.OnLevelBreak">
            <summary>
            角色突破，允许继续升级
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.OnAttributeChanged">
            <summary>
            角色的属性发生变化，会影响特殊效果的计算
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较一个角色（只比较 <see cref="M:Milimoe.FunGame.Core.Entity.Character.ToString"/>）
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToString">
            <summary>
            获取角色实例的昵称以及所属玩家，如果没有昵称，则用名字代替
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToStringWithOutUser">
            <summary>
            获取角色实例的名字、昵称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToStringWithUser">
            <summary>
            获取角色实例的名字、昵称以及所属玩家
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToStringWithLevel">
            <summary>
            获取角色实例的名字、昵称以及所属玩家，包含等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToStringWithLevelWithOutUser">
            <summary>
            获取角色实例的名字、昵称以及等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetName(System.Boolean)">
            <summary>
            获取角色的名字
            </summary>
            <param name="full"></param>
            <returns>如果 <paramref name="full"/> = false，返回 <see cref="P:Milimoe.FunGame.Core.Entity.Character.FirstName"/>；反之，返回 <see cref="P:Milimoe.FunGame.Core.Entity.Character.Name"/> + <see cref="P:Milimoe.FunGame.Core.Entity.Character.FirstName"/>。</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取角色的详细信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetSimpleInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取角色的简略信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetInBattleInfo(System.Double)">
            <summary>
            获取战斗状态的信息
            </summary>
            <param name="hardnessTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetSimpleInBattleInfo(System.Double)">
            <summary>
            获取战斗状态的信息（简略版）
            </summary>
            <param name="hardnessTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetSkillInfo(System.Boolean)">
            <summary>
            获取角色的技能信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetItemInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取角色的物品信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetEquipSlotInfo">
            <summary>
            获取角色装备栏信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetBackpackItemsInfo">
            <summary>
            获取角色背包信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetMagicResistanceInfo">
            <summary>
            获取魔法抗性信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.UpdateCharacterState">
            <summary>
            更新角色的状态，参见 <see cref="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectStates"/>、<see cref="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectTypes"/> 用法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Copy(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            复制一个角色
            [ 推荐从模组中复制后使用对象 ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Respawn(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            复活此角色，回复出厂状态
            <para>注意：此方法仅用于角色的复活，如果需要完全重构相同角色，请使用 <see cref="T:Milimoe.FunGame.Core.Entity.CharacterBuilder"/></para>
            </summary>
            <param name="original">需要一个原始的角色用于还原状态</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterBuilder.#ctor(System.Int64,System.String,System.String,System.String,Milimoe.FunGame.Core.Library.Constant.PrimaryAttribute,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            基于初始属性创建角色构建器
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="firstName"></param>
            <param name="nickName"></param>
            <param name="primaryAttribute"></param>
            <param name="initialATK"></param>
            <param name="initialDEF"></param>
            <param name="initialHP"></param>
            <param name="initialMP"></param>
            <param name="initialSTR"></param>
            <param name="strGrowth"></param>
            <param name="initialAGI"></param>
            <param name="agiGrowth"></param>
            <param name="initialINT"></param>
            <param name="intGrowth"></param>
            <param name="initialSPD"></param>
            <param name="initialHR"></param>
            <param name="initialMR"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterBuilder.#ctor(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            基于模板角色创建角色构建器
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterBuilder.Build(System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Item},System.Boolean,Milimoe.FunGame.Core.Entity.EquipSlot,Milimoe.FunGame.Core.Entity.Inventory,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Item},System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Skill})">
            <summary>
            基于初始条件构建新的角色
            <para>需要传入技能、物品，可选构建装备</para>
            </summary>
            <param name="skills"></param>
            <param name="items"></param>
            <param name="newItemGuid"></param>
            <param name="equips"></param>
            <param name="inventory"></param>
            <param name="itemsDefined"></param>
            <param name="skillsDefined"></param>
            <returns>构建的新角色</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterBuilder.Build(Milimoe.FunGame.Core.Entity.Character,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Entity.Inventory,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Item},System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Skill},System.Boolean,System.Boolean)">
            <summary>
            使用 <paramref name="reference"/> 角色构建
            <para>新角色将获得参考角色的等级、技能、装备和身上的物品</para>
            </summary>
            <param name="reference"></param>
            <param name="newItemGuid"></param>
            <param name="copyLevel"></param>
            <param name="inventory">高危数据警告：传入此项会修改库存中物品的角色引用</param>
            <param name="itemsDefined">对于动态扩展的物品而言，传入已定义的物品表，不使用被复制物品的数据</param>
            <param name="skillsDefined">对于动态扩展的技能而言，传入已定义的技能表，不使用被复制技能的数据</param>
            <param name="recovery"></param>
            <param name="copyEP"></param>
            <returns>构建的新角色</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.CharacterProfile">
            <summary>
            角色的一些个人信息
            </summary>
            <param name="name"></param>
            <param name="firstname"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterProfile.#ctor(System.String,System.String,System.String)">
            <summary>
            角色的一些个人信息
            </summary>
            <param name="name"></param>
            <param name="firstname"></param>
            <param name="nickname"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Name">
            <summary>
            角色的姓
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.FirstName">
            <summary>
            角色的名字
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.NickName">
            <summary>
            角色的昵称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Birthplace">
            <summary>
            角色的出生地
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Birthday">
            <summary>
            角色的出生日期
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Status">
            <summary>
            角色的身份
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Affiliation">
            <summary>
            角色的隶属
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Sex">
            <summary>
            角色的性别
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Height">
            <summary>
            角色的身高
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Weight">
            <summary>
            角色的体重
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Stories">
            <summary>
            角色的故事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterProfile.Copy">
            <summary>
            复制一个角色资料
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.EquipSlot">
            <summary>
            角色的装备槽位
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.EquipSlot.#ctor">
            <summary>
            角色的装备槽位
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.MagicCardPack">
            <summary>
            魔法卡包
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Weapon">
            <summary>
            武器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Armor">
            <summary>
            防具
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Shoes">
            <summary>
            鞋子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Accessory1">
            <summary>
            饰品1
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Accessory2">
            <summary>
            饰品2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.LastEquipSlotType">
            <summary>
            上一次装备的饰品槽
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.EquipSlot.Any">
            <summary>
            是否有任意装备
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.MagicResistance">
            <summary>
            角色的魔法抗性，对不同的魔法类型有不同抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.None">
            <summary>
            无属性魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Starmark">
            <summary>
            星痕魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.PurityNatural">
            <summary>
            纯粹结晶魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.PurityContemporary">
            <summary>
            纯现代结晶魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Bright">
            <summary>
            光魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Shadow">
            <summary>
            影魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Element">
            <summary>
            元素魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Aster">
            <summary>
            紫宛魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.SpatioTemporal">
            <summary>
            时空魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Avg">
            <summary>
            平均魔法抗性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.MagicResistance.Item(Milimoe.FunGame.Core.Library.Constant.MagicType)">
            <summary>
            获取或设置抗性值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.MagicResistance.AddAllValue(System.Double)">
            <summary>
            增加所有抗性，传入负数来减少
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.MagicResistance.Copy">
            <summary>
            复制一个魔法抗性对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Shield">
            <summary>
            角色的护盾，对不同的魔法类型有不同值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.ShieldOfEffects">
            <summary>
            绑定到特效的护盾对象。键为特效，值为对应的护盾对象。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Physical">
            <summary>
            物理护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.None">
            <summary>
            无属性魔法护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Starmark">
            <summary>
            星痕魔法护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.PurityNatural">
            <summary>
            纯粹结晶护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.PurityContemporary">
            <summary>
            纯现代结晶护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Bright">
            <summary>
            光护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Shadow">
            <summary>
            影护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Element">
            <summary>
            元素护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Aster">
            <summary>
            紫宛护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.SpatioTemporal">
            <summary>
            时空护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Mix">
            <summary>
            混合护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.TotalMix">
            <summary>
            总计混合护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.TotalPhysical">
            <summary>
            总计物理护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.TotalMagical">
            <summary>
            总计魔法护盾
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Shield.Item(System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType)">
            <summary>
            获取或设置护盾值
            </summary>
            <param name="isMagic"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Shield.AddShieldOfEffect(Milimoe.FunGame.Core.Entity.ShieldOfEffect)">
            <summary>
            添加一个绑定到特效的护盾，注意：如果特效已经存在护盾，则会覆盖原有护盾。
            </summary>
            <param name="soe"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Shield.RemoveShieldOfEffect(Milimoe.FunGame.Core.Entity.Effect)">
            <summary>
            移除某个特效的护盾
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Shield.CalculateShieldOfEffect(Milimoe.FunGame.Core.Entity.Effect,System.Double)">
            <summary>
            计算并更新特效的护盾值，如果护盾值小于等于 0，则移除该特效的护盾。
            </summary>
            <param name="effect"></param>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Shield.Copy">
            <summary>
            复制一个护盾对象。注意：不会复制绑定到特效的护盾对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.ShieldOfEffect">
            <summary>
            绑定到特效的护盾对象。这个类没有 JSON 转换器支持。
            </summary>
            <param name="effect"></param>
            <param name="shield"></param>
            <param name="shieldType"></param>
            <param name="magicType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.ShieldOfEffect.#ctor(Milimoe.FunGame.Core.Entity.Effect,System.Double,Milimoe.FunGame.Core.Library.Constant.ShieldType,Milimoe.FunGame.Core.Library.Constant.MagicType)">
            <summary>
            绑定到特效的护盾对象。这个类没有 JSON 转换器支持。
            </summary>
            <param name="effect"></param>
            <param name="shield"></param>
            <param name="shieldType"></param>
            <param name="magicType"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Unit">
            <summary>
            <see cref="T:Milimoe.FunGame.Core.Entity.Unit"/> 是一个用于描述生物的单元对象（单位），而 <see cref="T:Milimoe.FunGame.Core.Entity.Character"/> 是一种高级单位（单位单位/英雄单位）<para />
            和单位一样，使用 <see cref="T:Milimoe.FunGame.Core.Api.Utility.InitRequired"/> 标记的需要初始赋值的属性<para />
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Unit.Name">
            <summary>
            单位名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.ToString">
            <summary>
            获取单位名称以及所属玩家
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.ToStringWithLevel">
            <summary>
            获取单位名称以及所属玩家，包含等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取单位的详细信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetSimpleInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取单位的简略信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetInBattleInfo(System.Double)">
            <summary>
            获取战斗状态的信息
            </summary>
            <param name="hardnessTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetSimpleInBattleInfo(System.Double)">
            <summary>
            获取战斗状态的信息（简略版）
            </summary>
            <param name="hardnessTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetSkillInfo(System.Boolean)">
            <summary>
            获取单位的技能信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Unit.GetItemInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取单位的物品信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Item">
            <summary>
            和 <see cref="T:Milimoe.FunGame.Core.Entity.Skill"/> 一样，需要继承构造
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Guid">
            <summary>
            唯一标识符
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Description">
            <summary>
            物品的描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.GeneralDescription">
            <summary>
            物品的通用描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.BackgroundStory">
            <summary>
            物品的背景故事
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.ItemType">
            <summary>
            物品类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsEquipment">
            <summary>
            是否是装备
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsLock">
            <summary>
            锁定后无法被出售和交易且不能被手动移出库存
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Equipable">
            <summary>
            是否允许装备
            [ 注意：这个不是用来判断是不是装备类型的，判断装备类型时，请判断他们的 <see cref="P:Milimoe.FunGame.Core.Entity.Item.IsEquipment"/> ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Unequipable">
            <summary>
            是否允许取消装备
            [ 注意：这个不是用来判断是不是装备类型的，判断装备类型时，使用 <see cref="P:Milimoe.FunGame.Core.Entity.Item.IsEquipment"/> ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.EquipSlotType">
            <summary>
            当前装备的槽位
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.WeaponType">
            <summary>
            武器类型（如果是武器）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.QualityType">
            <summary>
            品质类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.RarityType">
            <summary>
            稀有度类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.RankType">
            <summary>
            物品评级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Key">
            <summary>
            快捷键
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsActive">
            <summary>
            是否是主动物品
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Enable">
            <summary>
            是否可用（涉及冷却和禁用等）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsInGameItem">
            <summary>
            是否是局内使用的物品（局内是指对角色生效的物品）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsPurchasable">
            <summary>
            是否允许购买
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Price">
            <summary>
            物品的价格
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsSellable">
            <summary>
            是否允许出售
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.NextSellableTime">
            <summary>
            下次可出售的时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsTradable">
            <summary>
            是否允许交易
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.NextTradableTime">
            <summary>
            下次可交易的时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.RemainUseTimes">
            <summary>
            剩余使用次数<para/>
            对于永久性主动物品而言，如果是 <see cref="P:Milimoe.FunGame.Core.Entity.Item.IsInGameItem"/> 物品，可以不设置此值；反之，强烈建议设置为 1.
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsReduceTimesAfterUse">
            <summary>
            使用后减少使用次数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsRemoveAfterUse">
            <summary>
            用完后删除物品
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Character">
            <summary>
            物品所属的角色（只有装备物品，才需要设置）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.User">
            <summary>
            所属的玩家
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Skills">
            <summary>
            物品拥有的技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Others">
            <summary>
            其他内容
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemEquip(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            当装备物品时
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemUnEquip(Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            当取消装备物品时
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.SetGamingQueue(Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            设置游戏内的行动顺序表实例
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.UseItem(Milimoe.FunGame.Core.Interface.Base.IGamingQueue,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            局内使用物品触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.UseItem(Milimoe.FunGame.Core.Entity.User,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            局外（库存）使用物品触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.ReduceTimesAndRemove(System.Int32)">
            <summary>
            使用后减少使用次数或删除物品
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemUsed(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,System.Boolean@)">
            <summary>
            当物品被角色使用时
            </summary>
            <param name="character"></param>
            <param name="item"></param>
            <param name="cancel"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemUsed(Milimoe.FunGame.Core.Entity.User,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            当物品被玩家使用时
            </summary>
            <param name="user"></param>
            <param name="times"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemEquipped(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            当物品被装备时
            </summary>
            <param name="character"></param>
            <param name="item"></param>
            <param name="type"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemUnEquipped(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            当物品被取消装备时
            </summary>
            <param name="character"></param>
            <param name="item"></param>
            <param name="type"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.AfterCopy">
            <summary>
            物品完成复制后触发
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.ToString">
            <summary>
            显示物品的详细信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.ToString(System.Boolean,System.Boolean)">
            <summary>
            显示物品的详细信息
            </summary>
            <param name="isShowGeneralDescription">是否显示通用描述，而不是描述</param>
            <param name="isShowInStore">是否在商店中显示</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            判断两个物品是否相同 检查Id.Name
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.SetPropertyToItemModuleNew(Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            设置一些属性给从工厂构造出来的 <paramref name="newbyFactory"/> 对象
            </summary>
            <param name="newbyFactory"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.Copy(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Item},System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Skill})">
            <summary>
            复制一个物品
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.SetLevel(System.Int32)">
            <summary>
            设置所有技能的等级
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.SetMagicsLevel(System.Int32)">
            <summary>
            设置所有魔法的等级
            </summary>
            <param name="level"></param>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Item._character">
            <summary>
            所属的角色
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.OpenItem">
            <summary>
            用于动态扩展物品
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.SkillGroup">
            <summary>
            物品只有一个主动技能，但是可以有很多个被动技能
            <para>魔法卡包具有很多个魔法技能</para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillGroup.Active">
            <summary>
            唯一的主动技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillGroup.Passives">
            <summary>
            被动技能组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillGroup.Magics">
            <summary>
            魔法技能组
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Effect">
            <summary>
            特殊效果类，需要继承
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Skill">
            <summary>
            所属的技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.EffectType">
            <summary>
            特殊效果类型<para/>
            注意：如果技能特效没有原生施加控制效果，请始终保持此属性为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.EffectType.None"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Durative">
            <summary>
            持续性的<para/>
            配合 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Duration"/> 使用，而不是 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.DurationTurn"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Duration">
            <summary>
            持续时间<para/>
            配合 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Durative"/> 使用。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DurationTurn">
            <summary>
            持续时间（回合）<para/>
            使用此属性需要将 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Durative"/> 设置为 false。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.RemainDuration">
            <summary>
            剩余持续时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.RemainDurationTurn">
            <summary>
            剩余持续时间（回合）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DurativeWithoutDuration">
            <summary>
            是否是没有具体持续时间的持续性特效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.ParentEffect">
            <summary>
            附属于某个特效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IsSubsidiary">
            <summary>
            是否是某个特效的附属
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.ForceHideInStatusBar">
            <summary>
            是否强制在状态栏中隐藏
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.ShowInStatusBar">
            <summary>
            是否显示在状态栏
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IsInEffect">
            <summary>
            特效是否生效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.MagicType">
            <summary>
            魔法类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DispelType">
            <summary>
            驱散性 [ 能驱散什么特效，默认无驱散 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DispelledType">
            <summary>
            被驱散性 [ 能被什么驱散类型驱散，默认弱驱散 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IsDebuff">
            <summary>
            是否是负面效果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DispelDescription">
            <summary>
            驱散性和被驱散性的具体说明
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.CanWeakDispel">
            <summary>
            是否具备弱驱散功能（强驱散包含在内）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.CanStrongDispel">
            <summary>
            是否具备强驱散功能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IsTemporaryDispel">
            <summary>
            是否是临时驱散 [ 需注意持续性驱散是在持续时间内将特效无效化而不是移除，适用临时驱散机制 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IsBeingTemporaryDispelled">
            <summary>
            是否处于临时被驱散状态 [ 如果使用后不手动恢复为 false，那么行动顺序表会在时间流逝时恢复它 ]
            <para/>注意看标准实现，需要配合 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectLost(Milimoe.FunGame.Core.Entity.Character)"/> 和 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectGained(Milimoe.FunGame.Core.Entity.Character)"/> 使用
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.IgnoreImmune">
            <summary>
            无视免疫类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Description">
            <summary>
            效果描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Level">
            <summary>
            等级，跟随技能的等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Source">
            <summary>
            此特效的施加者，用于溯源
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.GamingQueue">
            <summary>
            游戏中的行动顺序表实例，在技能效果被触发时，此实例会获得赋值，使用时需要判断其是否存在
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Values">
            <summary>
            用于动态扩展特效的参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.WriteLine">
            <summary>
            输出文本或日志
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.#ctor(Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Values 构造动态特效参考这个构造函数
            </summary>
            <param name="skill"></param>
            <param name="args"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectGained(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获得此特效时
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectLost(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            失去此特效时
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterDamageTypeBeforeCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean@,Milimoe.FunGame.Core.Library.Constant.DamageType@,Milimoe.FunGame.Core.Library.Constant.MagicType@)">
            <summary>
            在伤害计算前修改伤害类型
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterExpectedDamageBeforeCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Effect,System.Double})">
            <summary>
            在伤害计算前修改预期伤害
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="totalDamageBonus"></param>
            <returns>返回伤害增减值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterActualDamageAfterCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult,System.Boolean@,System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Effect,System.Double})">
            <summary>
            在伤害计算完成后修改实际伤害 [ 允许取消伤害 ]
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
            <param name="isEvaded"></param>
            <param name="totalDamageBonus"></param>
            <returns>返回伤害增减值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.BeforeApplyTrueDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            在应用真实伤害前修改伤害 [ 允许取消伤害 ]
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageResult"></param>
            <returns>返回 true 取消伤害</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnApplyDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult,System.String,System.String@)">
            <summary>
            伤害应用时触发
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="actualDamage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
            <param name="shieldMessage"></param>
            <param name="originalMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterHardnessTimeAfterNormalAttack(Milimoe.FunGame.Core.Entity.Character,System.Double@,System.Boolean@)">
            <summary>
            在完成普通攻击动作之后修改硬直时间
            </summary>
            <param name="character"></param>
            <param name="baseHardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterHardnessTimeAfterCastSkill(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Double@,System.Boolean@)">
            <summary>
            在完成释放技能动作之后修改硬直时间
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
            <param name="baseHardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterEPAfterDamage(Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            在造成伤害时，修改获得的能量
            </summary>
            <param name="character"></param>
            <param name="baseEP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterEPAfterGetDamage(Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            在受到伤害时，修改获得的能量
            </summary>
            <param name="character"></param>
            <param name="baseEP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCasting(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            技能开始吟唱时 [ 爆发技插队可触发此项 ]
            </summary>
            <param name="caster"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCastInterrupted(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            技能吟唱被打断时
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCasted(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            吟唱结束后释放技能（魔法）/ 直接释放技能（战技/爆发技）
            </summary>
            <param name="caster"></param>
            <param name="targets"></param>
            <param name="others"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCasted(Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            对目标触发技能效果（局外）
            </summary>
            <param name="user"></param>
            <param name="targets"></param>
            <param name="others"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTimeElapsed(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            时间流逝时
            </summary>
            <param name="character"></param>
            <param name="elapsed"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTimeElapsed(Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Double)">
            <summary>
            时间流逝时 [ 地图用 ]
            </summary>
            <param name="grid"></param>
            <param name="elapsed"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AfterDamageCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            在完成伤害结算后
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="actualDamage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterHealValueBeforeHealToTarget(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean@,System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Effect,System.Double})">
            <summary>
            在治疗结算前修改治疗值
            </summary>
            <param name="actor"></param>
            <param name="target"></param>
            <param name="heal"></param>
            <param name="canRespawn"></param>
            <param name="totalHealBonus"></param>
            <returns>返回治疗增减值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTurnStart(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item})">
            <summary>
            在特效持有者的回合开始前
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="items"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTurnEnd(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            在特效持有者的回合结束后
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillLevelUp(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            技能被升级时
            </summary>
            <param name="character"></param>
            <param name="level"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnOwnerLevelUp(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            特效持有者升级时
            </summary>
            <param name="owner"></param>
            <param name="level"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AfterDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32})">
            <summary>
            在完成死亡结算后 [ 全体广播 ]
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
            <param name="continuousKilling"></param>
            <param name="earnedMoney"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.BeforeEvadeCheck(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            闪避检定前触发
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="throwingBonus"></param>
            <returns>返回 false 表示不进行闪避检定</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEvadedTriggered(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            在触发闪避时
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="dice"></param>
            <returns>返回 true 表示无视闪避</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.BeforeCriticalCheck(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            暴击检定前触发
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="throwingBonus"></param>
            <returns>返回 false 表示不进行暴击检定</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnCriticalDamageTriggered(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            在触发暴击时
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="dice"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnAttributeChanged(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色属性发生变化
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterSelectListBeforeAction(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32})">
            <summary>
            行动开始前，修改可选择的 <paramref name="enemys"/>, <paramref name="teammates"/>, <paramref name="skills"/> 列表<para/>
            注意 <paramref name="continuousKilling"/> 和 <paramref name="earnedMoney"/> 是副本，修改无效
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="continuousKilling"></param>
            <param name="earnedMoney"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.BeforeSelectTargetGrid(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Library.Common.Addon.GameMap,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            开始选择移动目标前
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="map"></param>
            <param name="moveRange"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterSelectListBeforeSelection(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Interface.Entity.ISkill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            开始选择目标前，修改可选择的 <paramref name="enemys"/>, <paramref name="teammates"/> 列表<para/>
            <see cref="T:Milimoe.FunGame.Core.Interface.Entity.ISkill"/> 有两种，使用时注意判断是 <see cref="T:Milimoe.FunGame.Core.Entity.Skill"/> 还是 <see cref="T:Milimoe.FunGame.Core.Entity.NormalAttack"/>
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterActionTypeBeforeAction(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.CharacterState,System.Boolean@,System.Boolean@,System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>
            行动开始前，指定角色的行动，而不是使用顺序表自带的逻辑；或者修改对应的操作触发概率
            </summary>
            <param name="character"></param>
            <param name="state"></param>
            <param name="canUseItem"></param>
            <param name="canCastSkill"></param>
            <param name="pUseItem"></param>
            <param name="pCastSkill"></param>
            <param name="pNormalAttack"></param>
            <param name="forceAction"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnDispellingEffect(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Boolean)">
            <summary>
            可重写对某个特效的驱散实现，适用于特殊驱散类型
            </summary>
            <param name="dispeller"></param>
            <param name="target"></param>
            <param name="effect"></param>
            <param name="isEnemy"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectIsBeingDispelled(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Boolean)">
            <summary>
            当特效被驱散时的
            </summary>
            <param name="dispeller"></param>
            <param name="target"></param>
            <param name="dispellerEffect"></param>
            <param name="isEnemy"></param>
            <returns>返回 false 可以阻止驱散</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AfterLifesteal(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Double)">
            <summary>
            当角色触发生命偷取后
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="steal"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.BeforeShieldCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double,System.Double@,System.String@)">
            <summary>
            在角色护盾结算前触发
            </summary>
            <param name="character"></param>
            <param name="attacker"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damage"></param>
            <param name="damageReduce"></param>
            <param name="message"></param>
            <returns>返回 false 可以跳过护盾结算</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnShieldNeutralizeDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double,Milimoe.FunGame.Core.Library.Constant.ShieldType)">
            <summary>
            在角色护盾有效防御时 [ 破碎本身不会触发此钩子，但破碎后化解可触发 ]
            </summary>
            <param name="character"></param>
            <param name="attacker"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damage"></param>
            <param name="shieldType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnShieldBroken(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.ShieldType,System.Double)">
            <summary>
            当角色护盾破碎时 [ 非绑定特效，只有同种类型的总护盾值小于等于 0 时触发 ]
            </summary>
            <param name="character"></param>
            <param name="attacker"></param>
            <param name="type"></param>
            <param name="overFlowing"></param>
            <returns>返回 false 可以阻止后续扣除角色生命值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnShieldBroken(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Double)">
            <summary>
            当角色护盾破碎时 [ 绑定特效的护盾值小于等于 0 时便会触发 ]
            </summary>
            <param name="character"></param>
            <param name="attacker"></param>
            <param name="effect"></param>
            <param name="overFlowing"></param>
            <returns>返回 false 可以阻止后续扣除角色生命值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnImmuneCheck(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Interface.Entity.ISkill,Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            在免疫检定时
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <param name="skill"></param>
            <param name="item"></param>
            <returns>false：免疫检定不通过</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnDamageImmuneCheck(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double)">
            <summary>
            在伤害免疫检定时
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damage"></param>
            <returns>false：免疫检定不通过</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.DamageToEnemy(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double)">
            <summary>
            对敌人造成技能伤害 [ 强烈建议使用此方法造成伤害而不是自行调用 <see cref="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.DamageToEnemyAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)"/> ]
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="expectedDamage"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.HealToTarget(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            治疗一个目标 [ 强烈建议使用此方法而不是自行调用 <see cref="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.HealToTargetAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)"/> ]
            </summary>
            <param name="actor"></param>
            <param name="target"></param>
            <param name="heal"></param>
            <param name="canRespawn"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.InterruptCasting(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法 [ 尽可能的调用此方法而不是直接调用 <see cref="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)"/>，以防止中断性变更 ]
            </summary>
            <param name="caster"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.InterruptCasting(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法 [ 用于使敌人目标丢失 ] [ 尽可能的调用此方法而不是直接调用 <see cref="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character)"/>，以防止中断性变更 ]
            </summary>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AddEffectStatesToCharacter(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.CharacterState})">
            <summary>
            将特效状态设置到角色上 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character"></param>
            <param name="states"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AddEffectTypeToCharacter(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.EffectType})">
            <summary>
            将特效控制效果设置到角色上 [ 尽可能的调用此方法而不是自己实现 ]
            <para>施加 EffectType 的同时也会施加 CharacterState，参见 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.AddEffectStatesToCharacter(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.CharacterState})"/></para>
            </summary>
            <param name="character"></param>
            <param name="types"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AddImmuneTypesToCharacter(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.ImmuneType})">
            <summary>
            将免疫状态设置到角色上 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character"></param>
            <param name="types"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RemoveEffectStatesFromCharacter(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            将特效状态从角色身上移除 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RemoveEffectTypesFromCharacter(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            将特效控制效果从角色身上移除 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RemoveImmuneTypesFromCharacter(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            将免疫状态从角色身上移除 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RemoveEffectTypesByDispel(System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.EffectType},System.Boolean)">
            <summary>
            从角色身上消除特效类型 [ 如果重写了 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.OnDispellingEffect(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Boolean)"/>，则尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="types"></param>
            <param name="isEnemy"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RemoveEffectStatesByDispel(System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.CharacterState})">
            <summary>
            从角色身上消除状态类型 [ 如果重写了 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.OnDispellingEffect(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Boolean)"/>，则尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="states"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.Dispel(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean)">
            <summary>
            驱散目标 [ 尽可能的调用此方法而不是自己实现 ]
            <para>此方法会触发 <see cref="M:Milimoe.FunGame.Core.Entity.Effect.OnDispellingEffect(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Effect,System.Boolean)"/></para>
            </summary>
            <param name="dispeller"></param>
            <param name="target"></param>
            <param name="isEnemy"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.ChangeCharacterHardnessTime(Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean)">
            <summary>
            修改角色的硬直时间 [ 尽可能的调用此方法而不是自己实现 ]
            </summary>
            <param name="character">角色</param>
            <param name="addValue">加值</param>
            <param name="isPercentage">是否是百分比</param>
            <param name="isCheckProtected">是否使用插队保护机制</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.SetCharactersToAIControl(System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            设置角色为 AI 控制 [ 系统控制 ]
            </summary>
            <param name="cancel"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.IsCharacterInAIControlling(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.RecordCharacterApplyEffects(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Constant.EffectType})">
            <summary>
            添加角色应用的特效类型到回合记录中
            </summary>
            <param name="character"></param>
            <param name="types"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.ToString">
            <summary>
            返回特效详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.Copy(Milimoe.FunGame.Core.Entity.Skill,System.Boolean)">
            <summary>
            复制一个特效
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较两个特效
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.GetDispelDescription(System.String)">
            <summary>
            获取驱散描述
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Effect._dispelDescription">
            <summary>
            驱散描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Name">
            <summary>
            普通攻击名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Description">
            <summary>
            普通攻击说明
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.GeneralDescription">
            <summary>
            普通攻击的通用说明
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Character">
            <summary>
            所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.BaseDamageMultiplier">
            <summary>
            基础普通攻击伤害倍率 [ 武器类型相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Damage">
            <summary>
            普通攻击的伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.ExDamage">
            <summary>
            额外普通攻击伤害 [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.ExDamage2">
            <summary>
            额外普通攻击伤害% [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Level">
            <summary>
            普通攻击等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.IsMagic">
            <summary>
            是否是魔法伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.MagicType">
            <summary>
            魔法伤害需要指定魔法类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Enable">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.IsInEffect">
            <summary>
            是否在持续生效，为 true 时不允许再次使用。普通攻击始终为 false
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.IgnoreImmune">
            <summary>
            无视免疫类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.HardnessTime">
            <summary>
            硬直时间 [ 武器类型相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.ExHardnessTime">
            <summary>
            额外硬直时间 [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.ExHardnessTime2">
            <summary>
            额外硬直时间% [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.RealHardnessTime">
            <summary>
            实际硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectSelf">
            <summary>
            可选取自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectEnemy">
            <summary>
            可选取敌对角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectTeammate">
            <summary>
            可选取友方角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.SelectAllEnemies">
            <summary>
            选取所有敌对角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectTargetCount"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.SelectAllTeammates">
            <summary>
            选取所有友方角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectTargetCount"/>，默认包含自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectTargetCount">
            <summary>
            可选取的作用目标数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CanSelectTargetRange">
            <summary>
            可选取的作用范围 [ 单位：格 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.RealMPCost">
            <summary>
            普通攻击没有魔法消耗
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.RealCastTime">
            <summary>
            普通攻击没有吟唱时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.RealEPCost">
            <summary>
            普通攻击没有能量消耗
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.RealCD">
            <summary>
            普通攻击没有冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.CurrentCD">
            <summary>
            普通攻击没有冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.GamingQueue">
            <summary>
            游戏中的行动顺序表实例，使用时需要判断其是否存在
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.NormalAttackOfEffects">
            <summary>
            绑定到特效的普通攻击扩展。键为特效，值为对应的普攻扩展对象。
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.GetSelectableTargets(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            获取可选择的目标列表
            </summary>
            <param name="attacker"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.RealCanSelectTargetCount(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            实际可选取的目标数量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.SelectTargets(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            选取普攻目标
            </summary>
            <param name="attacker"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.Attack(Milimoe.FunGame.Core.Interface.Base.IGamingQueue,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            对目标（或多个目标）发起普通攻击
            </summary>
            <param name="queue"></param>
            <param name="attacker"></param>
            <param name="enemys"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.SetMagicType(System.Nullable{System.Boolean},System.Nullable{Milimoe.FunGame.Core.Library.Constant.MagicType},Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            修改基础伤害类型。不一定转换成功，要看是否有特效覆盖
            </summary>
            <param name="isMagic"></param>
            <param name="magicType"></param>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.SetMagicType(Milimoe.FunGame.Core.Entity.NormalAttackOfEffect,Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            修改伤害类型。不一定转换成功，要看是否有其他特效覆盖
            </summary>
            <param name="naoe"></param>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.UnsetMagicType(Milimoe.FunGame.Core.Entity.Effect,Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            移除特效对伤害类型的更改
            </summary>
            <param name="effect"></param>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.ResolveMagicType(Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            计算是否是魔法伤害和当前的魔法类型
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较两个普攻对象
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.GetInfo(System.Boolean)">
            <summary>
            输出信息
            </summary>
            <param name="showOriginal"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.ToString">
            <summary>
            输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._IsMagic">
            <summary>
            是否是魔法伤害 [ 生效型 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._MagicType">
            <summary>
            魔法类型 [ 生效型 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._ExIsMagic">
            <summary>
            是否是魔法伤害 [ 修改型 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._ExMagicType">
            <summary>
            魔法类型 [ 修改型 ]
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.NormalAttackOfEffect">
            <summary>
            绑定到特效的普通攻击扩展。这个类没有 JSON 转换器支持。
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttackOfEffect.#ctor(Milimoe.FunGame.Core.Entity.Effect,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Int32)">
            <summary>
            绑定到特效的普通攻击扩展。这个类没有 JSON 转换器支持。
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.OpenSkill">
            <summary>
            用于动态扩展技能，<see cref="P:Milimoe.FunGame.Core.Entity.OpenSkill.Description"/> 返回所有特效的描述
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Skill">
            <summary>
            与 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.Character"/> 不同，构造技能时，建议继承此类再构造
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Guid">
            <summary>
            唯一标识符 [ 只有物品技能需要赋值，用于表示与其关联的物品：<see cref="P:Milimoe.FunGame.Core.Entity.Item.Guid"/> ]
            <para>其他情况请保持此属性为 <see cref="F:System.Guid.Empty"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Character">
            <summary>
            此技能所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Description">
            <summary>
            技能描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.GeneralDescription">
            <summary>
            技能的通用描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.DispelDescription">
            <summary>
            驱散性和被驱散性的描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Slogan">
            <summary>
            释放技能时的口号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Level">
            <summary>
            技能等级，等于 0 时可以称之为尚未学习
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SkillType">
            <summary>
            技能类型 [ 此项为最高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsActive">
            <summary>
            是否是主动技能 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Enable">
            <summary>
            是否可用 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsInEffect">
            <summary>
            效果持续生效中 [ 此项为高优先级 ] [ 此项设置为true后不允许再次释放，防止重复释放 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsSuperSkill">
            <summary>
            是否是爆发技 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsMagic">
            <summary>
            是否属于魔法 [ <see cref="P:Milimoe.FunGame.Core.Entity.Skill.IsActive"/> 必须为 true ]，反之为战技
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CastAnywhere">
            <summary>
            是否无视施法距离（全图施法），魔法默认为 true，战技默认为 false
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CastRange">
            <summary>
            施法距离 [ 单位：格 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectSelf">
            <summary>
            可选取自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectEnemy">
            <summary>
            可选取敌对角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTeammate">
            <summary>
            可选取友方角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SelectAllEnemies">
            <summary>
            选取所有敌对角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetCount"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SelectAllTeammates">
            <summary>
            选取所有友方角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetCount"/>，默认包含自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetCount">
            <summary>
            可选取的作用目标数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetRange">
            <summary>
            可选取的作用范围 [ 单位：格 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsNonDirectional">
            <summary>
            如果为 true，表示非指向性技能，可以任意选取一个范围（<see cref="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetRange"/> = 0 时为单个格子）。<para/>
            如果为 false，表示必须选取一个角色作为目标，当 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.CanSelectTargetRange"/> > 0 时，技能作用范围将根据目标位置覆盖 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.SkillRangeType"/> 形状的区域；= 0 时正常选取目标。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SkillRangeType">
            <summary>
            作用范围形状<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.Diamond"/> - 菱形。默认的曼哈顿距离正方形<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.Circle"/> - 圆形。基于欧几里得距离的圆形<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.Square"/> - 正方形<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.Line"/> - 施法者与目标之前的直线<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.LinePass"/> - 施法者与目标所在的直线，贯穿至地图边缘<para/>
            <see cref="F:Milimoe.FunGame.Core.Library.Constant.SkillRangeType.Sector"/> - 扇形<para/>
            注意，该属性不影响选取目标的范围。选取目标的范围由 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameMap"/> 决定。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SelectTargetPredicates">
            <summary>
            选取角色的条件
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.RealMPCost">
            <summary>
            实际魔法消耗 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.MPCost">
            <summary>
            魔法消耗 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CastTime">
            <summary>
            吟唱时间 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.RealCastTime">
            <summary>
            实际吟唱时间 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.RealEPCost">
            <summary>
            实际能量消耗 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.EPCost">
            <summary>
            能量消耗 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CostAllEP">
            <summary>
            消耗所有能量 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.MinCostEP">
            <summary>
            消耗所有能量的最小能量限制 [ 战技 ] 默认值：100
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.LastCostMP">
            <summary>
            上一次释放此技能消耗的魔法 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.LastCostEP">
            <summary>
            上一次释放此技能消耗的能量 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.RealCD">
            <summary>
            实际冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CD">
            <summary>
            冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CurrentCD">
            <summary>
            剩余冷却时间 [ 建议配合 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.Enable"/>  属性使用 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.HardnessTime">
            <summary>
            硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.ExHardnessTime">
            <summary>
            额外硬直时间 [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.ExHardnessTime2">
            <summary>
            额外硬直时间% [ 技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.RealHardnessTime">
            <summary>
            实际硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Effects">
            <summary>
            效果列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Values">
            <summary>
            用于动态扩展技能的参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.GamingQueue">
            <summary>
            游戏中的行动顺序表实例，在技能效果被触发时，此实例会获得赋值，使用时需要判断其是否存在
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Item">
            <summary>
            技能是否属于某个物品
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.#ctor(Milimoe.FunGame.Core.Library.Constant.SkillType,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            继承此类实现时，调用基类的构造函数
            </summary>
            <param name="type"></param>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.#ctor">
            <summary>
            用于构造 JSON
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.SetPropertyToItemModuleNew(Milimoe.FunGame.Core.Entity.Skill)">
            <summary>
            设置一些属性给从工厂构造出来的 <paramref name="newbyFactory"/> 对象
            </summary>
            <param name="newbyFactory"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnLevelUp">
            <summary>
            触发技能升级
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillGained(Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            当获得技能时
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnTurnStart(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item})">
            <summary>
            在技能持有者的回合开始前
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="items"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.GetSelectableTargets(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            获取可选择的目标列表
            </summary>
            <param name="caster"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.RealCanSelectTargetCount(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            实际可选取的目标数量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.SelectTargets(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            选取技能目标
            </summary>
            <param name="caster"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillCasting(Milimoe.FunGame.Core.Interface.Base.IGamingQueue,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            技能开始吟唱时 [ 吟唱魔法、释放战技和爆发技、预释放爆发技均可触发 ]
            </summary>
            <param name="queue"></param>
            <param name="caster"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.BeforeSkillCasted">
            <summary>
            技能效果触发前
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillCasted(Milimoe.FunGame.Core.Interface.Base.IGamingQueue,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            触发技能效果 [ 局内版 ]
            </summary>
            <param name="queue"></param>
            <param name="caster"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillCasted(Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            对目标触发技能效果
            </summary>
            <param name="user"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.IsCharacterInAIControlling(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.AddPassiveEffectToCharacter">
            <summary>
            被动技能，需要重写此方法，返回被动特效给角色 [ 此方法会在技能学习时触发 ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.GetInfo(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            返回技能的详细说明
            </summary>
            <param name="showOriginal"></param>
            <param name="showCD"></param>
            <param name="showHardness"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.ToString">
            <summary>
            返回技能的详细说明
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.ToString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            返回技能的详细说明，有选项
            </summary>
            <param name="showOriginal"></param>
            <param name="showCD"></param>
            <param name="showHardness"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            判断两个技能是否相同 检查Id.Name
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.Copy(System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Skill})">
            <summary>
            复制一个技能
            </summary>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Skill._Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Skill._CastRange">
            <summary>
            施法距离
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.SkillTarget">
            <summary>
            技能和它的目标结构体
            </summary>
            <param name="skill"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.SkillTarget.#ctor(Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            技能和它的目标结构体
            </summary>
            <param name="skill"></param>
            <param name="targets"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillTarget.Skill">
            <summary>
            技能实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillTarget.Targets">
            <summary>
            技能的目标列表
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.UserStatistics">
            <summary>
            记录 <see cref="T:Milimoe.FunGame.Core.Entity.User"/> 的生涯、赛季统计数据<para/>
            Key为赛季(long)，每个key代表第key赛季，key = 0时为生涯数据。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Id">
            <summary>
            库存 ID 与用户 ID 绑定
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Name">
            <summary>
            库存的名称，默认为 “<see cref="P:Milimoe.FunGame.Core.Entity.User.Username"/>的库存”；可更改
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.User">
            <summary>
            库存属于哪个玩家
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Credits">
            <summary>
            玩家持有 <see cref="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InGameCurrency"/> 的数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Materials">
            <summary>
            玩家持有 <see cref="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InGameMaterial"/> 的数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Characters">
            <summary>
            玩家拥有的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Items">
            <summary>
            玩家拥有的物品
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.MainCharacter">
            <summary>
            主战角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Squad">
            <summary>
            小队
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Inventory.Training">
            <summary>
            练级中的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.AvatarUrl">
            <summary>
            头像链接
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.Signature">
            <summary>
            签名
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.BirthDay">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.Followers">
            <summary>
            关注者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.Following">
            <summary>
            正在关注
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.Title">
            <summary>
            头衔
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.UserProfile.UserGroup">
            <summary>
            用户组
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.Base.IGamingQueue">
            <summary>
            回合制游戏的基础队列
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.GameplayEquilibriumConstant">
            <summary>
            使用的游戏平衡常数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.WriteLine">
            <summary>
            用于文本输出
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.Original">
            <summary>
            原始的角色字典
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.AllCharacters">
            <summary>
            参与本次游戏的所有角色列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.Queue">
            <summary>
            当前的行动顺序
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.LastRound">
            <summary>
            上回合记录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.Rounds">
            <summary>
            所有回合的记录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.Eliminated">
            <summary>
            当前已死亡的角色顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.CharacterStatistics">
            <summary>
            角色数据
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.TotalTime">
            <summary>
            游戏运行的时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.TotalRound">
            <summary>
            游戏运行的回合
            对于某角色而言，在其行动的回合叫 Turn，而所有角色行动的回合，都称之为 Round。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.Map">
            <summary>
            使用的地图
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.DisplayQueue">
            <summary>
            显示队列信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.ProcessTurnAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            处理回合动作
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.DamageToEnemyAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            造成伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.HealToTargetAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            治疗一个目标
            </summary>
            <param name="actor"></param>
            <param name="target"></param>
            <param name="heal"></param>
            <param name="canRespawn"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.CalculatePhysicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,System.Double,System.Double@,System.Int32@)">
            <summary>
            计算物理伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <param name="changeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.CalculateMagicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double,System.Double@,System.Int32@)">
            <summary>
            计算魔法伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="magicType"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <param name="changeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.DeathCalculationAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法
            </summary>
            <param name="caster"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法 [ 用于使敌人目标丢失 ]
            </summary>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.UseItemAsync(Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            使用物品
            </summary>
            <param name="item"></param>
            <param name="caster"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="castRange"></param>
            <param name="desiredTargets"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.CharacterMoveAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            角色移动
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <param name="startGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.SelectTargetGridAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Library.Common.Addon.GameMap,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取移动目标
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="map"></param>
            <param name="moveRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.SelectTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取技能目标
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="castRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.SelectTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.NormalAttack,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取普通攻击目标
            </summary>
            <param name="character"></param>
            <param name="attack"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="attackRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.IsTeammate(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            判断目标对于某个角色是否是队友
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.GetIsTeammateDictionary(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            获取目标对于某个角色是否是队友的字典
            </summary>
            <param name="character"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.SetCharactersToAIControl(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            设置角色为 AI 控制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.IsCharacterInAIControlling(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.ChangeCharacterHardnessTime(Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean)">
            <summary>
            修改角色的硬直时间
            </summary>
            <param name="character">角色</param>
            <param name="addValue">加值</param>
            <param name="isPercentage">是否是百分比</param>
            <param name="isCheckProtected">是否使用插队保护机制</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IGamingQueue.CalculateCharacterDamageStatistics(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,Milimoe.FunGame.Core.Library.Constant.DamageType,System.Double)">
            <summary>
            计算角色的数据
            </summary>
            <param name="character"></param>
            <param name="characterTaken"></param>
            <param name="damage"></param>
            <param name="damageType"></param>
            <param name="takenDamage"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.Running">
            <summary>
            服务器实例是否在运行
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.Socket">
            <summary>
            客户端的套接字实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.SQLHelper">
            <summary>
            客户端的数据库连接实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.MailSender">
            <summary>
            客户端的邮件服务实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.User">
            <summary>
            客户端的用户实例，在用户登录后有效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.ClientName">
            <summary>
            客户端的名称，默认是客户端的IP地址
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.IsDebugMode">
            <summary>
            客户端是否启动了开发者模式
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.InRoom">
            <summary>
            客户端所在的房间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.NowGamingServer">
            <summary>
            客户端的游戏模组服务器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.Send(Milimoe.FunGame.Core.Library.Constant.SocketMessageType,System.Object[])">
            <summary>
            向客户端发送消息
            </summary>
            <param name="type"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.SendSystemMessage(Milimoe.FunGame.Core.Library.Constant.ShowMessageType,System.String,System.String,System.Int32,System.String[])">
            <summary>
            向客户端发送系统消息
            </summary>
            <param name="showtype"></param>
            <param name="msg"></param>
            <param name="title"></param>
            <param name="autoclose"></param>
            <param name="usernames"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.Kick(System.String)">
            <summary>
            踢下线
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.ForceLogOut(System.String)">
            <summary>
            强制退出登录
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.GetClientName">
            <summary>
            获取客户端的名称，通常未登录时显示为客户端的IP地址，登录后显示为账号名
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.ISocketListener`1.Name">
            <summary>
            监听器的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.ISocketListener`1.ClientList">
            <summary>
            已连接的客户端列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.ISocketListener`1.UserList">
            <summary>
             已登录的用户列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.ISocketListener`1.BannedList">
            <summary>
            黑名单IP地址列表
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.ISocketListener`1.Close">
            <summary>
            关闭监听
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.IBaseEntity.Id">
            <summary>
            实体的数字标识符
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.IBaseEntity.Guid">
            <summary>
            实体的唯一标识符
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.IBaseEntity.Name">
            <summary>
            实体的名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Entity.IBaseEntity.GetIdName">
            <summary>
            获取实体的 Id.Name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.Entity.ISkill">
            <summary>
            ISkill 是技能的通用接口，包含一些基本属性，实现类：<see cref="T:Milimoe.FunGame.Core.Entity.NormalAttack"/> 和 <see cref="T:Milimoe.FunGame.Core.Entity.Skill"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.GamingQueue">
            <summary>
            所属的行动顺序表实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.Character">
            <summary>
            此技能所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.Description">
            <summary>
            技能描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.GeneralDescription">
            <summary>
            技能的通用描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.Level">
            <summary>
            技能等级，等于 0 时可以称之为尚未学习
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.Enable">
            <summary>
            是否可用 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.IsInEffect">
            <summary>
            效果持续生效中 [ 此项为高优先级 ] [ 此项设置为true后不允许再次释放，防止重复释放 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectSelf">
            <summary>
            可选取自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectEnemy">
            <summary>
            可选取敌对角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectTeammate">
            <summary>
            可选取友方角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.SelectAllEnemies">
            <summary>
            选取所有敌对角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectTargetCount"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.SelectAllTeammates">
            <summary>
            选取所有友方角色，优先级大于 <see cref="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectTargetCount"/>，默认包含自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectTargetCount">
            <summary>
            可选取的作用目标数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CanSelectTargetRange">
            <summary>
            可选取的作用范围 [ 单位：格 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealMPCost">
            <summary>
            实际魔法消耗 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealCastTime">
            <summary>
            实际吟唱时间 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealEPCost">
            <summary>
            实际能量消耗 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealCD">
            <summary>
            实际冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.CurrentCD">
            <summary>
            剩余冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealHardnessTime">
            <summary>
            实际硬直时间
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Entity.ISkill.GetSelectableTargets(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            获取可选择的目标列表
            </summary>
            <param name="caster"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Entity.ISkill.RealCanSelectTargetCount(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            实际可选取的目标数量
            </summary>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IEventHandler">
            <summary>
            窗体继承这些接口便能实现事件，或为插件预留。
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IGamingEventHandler">
            <summary>
            局内事件的接口，与 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 配套使用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IClient">
            <summary>
            这是最基本的接口，要求客户端实现
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IServer">
            <summary>
            服务器需要实现此接口
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.IServer.SecretKey">
            <summary>
            一个服务器标识秘钥
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Characters">
            <summary>
            此模组中包含的角色
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.EntityFactory">
            <summary>
            注册工厂
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleConstant">
            <summary>
            建议使用一个类来存储常量，方便重用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModule">
            <summary>
            模组：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/><para/>
            继承事件接口并实现其方法来使模组生效。例如继承：<seealso cref="T:Milimoe.FunGame.Core.Interface.IGamingUpdateInfoEvent"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer">
            <summary>
            模组服务器：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer"/><para/>
            使用switch块分类处理 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingType"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.Name">
            <summary>
            注意：服务器模组的名称必须和模组名称相同。除非你指定了 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule"/> 和 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AssociatedServerModuleName"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.ModuleServerWorker">
            <summary>
            创建一个工作类，接收服务器启动参数的同时，还能定义一些需要的属性
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.ModuleServerWorker.#ctor(Milimoe.FunGame.Core.Library.Common.Addon.GamingObject)">
            <summary>
            创建一个工作类，接收服务器启动参数的同时，还能定义一些需要的属性
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.StartAnonymousServer(Milimoe.FunGame.Core.Interface.Base.IServerModel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            匿名服务器示例
            </summary>
            <param name="model"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.AnonymousGameServerHandler(Milimoe.FunGame.Core.Interface.Base.IServerModel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            接收并处理匿名服务器消息
            </summary>
            <param name="model"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameMap">
            <summary>
            地图：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameMap"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleCharacterModule">
            <summary>
            角色：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleSkillModule">
            <summary>
            技能：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleItemModule">
            <summary>
            物品：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExamplePlugin">
            <summary>
            必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/><para/>
            继承事件接口并实现其方法来使插件生效。例如继承：<seealso cref="T:Milimoe.FunGame.Core.Interface.ILoginEvent"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name">
            <summary>
            地图名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Description">
            <summary>
            地图描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Version">
            <summary>
            地图版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Author">
            <summary>
            地图作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Size">
            <summary>
            格子大小
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Grids">
            <summary>
            格子集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GridsByCoordinate">
            <summary>
            格子集（基于坐标）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Characters">
            <summary>
            角色集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            使用坐标获取格子，0号格子的坐标是(0, 0)，如果你还有高度的话，则是(0, 0, 0)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Item(System.Int64)">
            <summary>
            使用编号获取格子，从0号开始
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Load(System.Object[])">
            <summary>
            加载地图
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.AfterLoad(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])">
            <summary>
            地图完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.BeforeLoad">
            <summary>
            允许返回false来阻止加载此地图
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.InitGamingQueue(Milimoe.FunGame.Core.Interface.Base.IGamingQueue)">
            <summary>
            初始化游戏队列，要求返回一个新的地图实例，而不是 this
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GetCharacterCurrentGrid(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取角色当前所在的格子
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.SetCharacterCurrentGrid(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            强制设置角色当前所在的格子
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.RemoveCharacter(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            将角色从地图中移除
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GetGridsByRange(Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Int32,System.Boolean)">
            <summary>
            获取以某个格子为中心，一定范围内的格子（曼哈顿距离），只考虑同一平面的格子。
            </summary>
            <param name="grid"></param>
            <param name="range"></param>
            <param name="includeCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GetOuterGridsByRange(Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Int32,System.Boolean)">
            <summary>
            获取以某个格子为中心，最远距离的格子（曼哈顿距离），只考虑同一平面的格子。
            </summary>
            <param name="grid"></param>
            <param name="range"></param>
            <param name="includeCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GetGridsByCircleRange(Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Int32,System.Boolean)">
            <summary>
            获取以某个格子为中心，一定半径内的格子（圆形范围，欧几里得距离），只考虑同一平面的格子。
            </summary>
            <param name="grid"></param>
            <param name="range"></param>
            <param name="includeCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.GetOuterGridsByCircleRange(Milimoe.FunGame.Core.Library.Common.Addon.Grid,System.Int32,System.Boolean)">
            <summary>
            获取以某个格子为中心，最远距离的格子（圆形范围，欧几里得距离），只考虑同一平面的格子。
            </summary>
            <param name="grid"></param>
            <param name="range"></param>
            <param name="includeCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.CharacterMove(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            设置角色移动
            </summary>
            <param name="character"></param>
            <param name="current"></param>
            <param name="target"></param>
            <returns>移动的步数，只算平面移动步数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.CharacterMoveToClosestReachable(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            设置角色移动。如果不能达到目标格子，则移动到离目标格子最近的一个可达格子上。
            </summary>
            <param name="character"></param>
            <param name="current"></param>
            <param name="target"></param>
            <returns>移动的步数，只算平面移动步数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.CalculateManhattanDistance(Milimoe.FunGame.Core.Library.Common.Addon.Grid,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            计算两个格子之间的曼哈顿距离
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns>两个格子之间的曼哈顿距离</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.BeforeTimeElapsed(System.Double@)">
            <summary>
            在事件流逝前处理
            </summary>
            <param name="timeToReduce"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.AfterTimeElapsed(System.Double@)">
            <summary>
            在事件流逝后处理
            </summary>
            <param name="timeToReduce"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.OnTimeElapsed(System.Double)">
            <summary>
            时间流逝时，处理格子上的特效
            </summary>
            <param name="timeToReduce"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.DefaultMap">
            <summary>
            默认地图
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.GameModuleDepend">
            <summary>
            模组的依赖集合
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.RoomType">
            <summary>
            适用的房间模式
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.MaxUsers">
            <summary>
            模组的容纳人数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.HideMain">
            <summary>
            是否隐藏主界面
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule">
            <summary>
            是否连接其他的服务器模组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AssociatedServerModuleName">
            <summary>
            如果将 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule"/> 设置为true，那么此属性必须指定一个存在的服务器模组的 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name"/> 名称。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IGameModule}#Controller">
            <summary>
            base控制器，没有DataRequest
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.StartGame(Milimoe.FunGame.Core.Model.Gaming,System.Object[])">
            <summary>
            必须重写此方法，游戏的主要逻辑写在这里面<para/>
            此方法会在 <see cref="M:Milimoe.FunGame.Core.Model.Gaming.StartGame(Milimoe.FunGame.Core.Library.Common.Addon.GameModule,Milimoe.FunGame.Core.Entity.Room,Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.User},Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])"/> 时调用<para/>
            </summary>
            <param name="instance"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.StartUI(System.Object[])">
            <summary>
            如模组有界面，请重写此方法
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AfterLoad(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])">
            <summary>
            模组完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BeforeLoad(System.Object[])">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Init(System.Object[])">
            <summary>
            传递委托以便让模组调用
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Session">
            <summary>
            Session对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Config">
            <summary>
            Config对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule._AssociatedServerModuleName">
            <summary>
            关联的服务器模组名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BeforeLoad(System.Object[])"/>后触发
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend">
            <summary>
            模组的依赖集合<para/>
            <paramref name="maps"></paramref>（地图名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name"/>）的数组）<para/>
            <paramref name="characters"></paramref>（角色模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name"/>）的数组）<para/>
            <paramref name="skills"></paramref>（技能模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name"/>）的数组）<para/>
            <paramref name="items"></paramref>（物品模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name"/>）的数组）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.#ctor(System.String[],System.String[],System.String[],System.String[])">
            <summary>
            模组的依赖集合<para/>
            <paramref name="maps"></paramref>（地图名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name"/>）的数组）<para/>
            <paramref name="characters"></paramref>（角色模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name"/>）的数组）<para/>
            <paramref name="skills"></paramref>（技能模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name"/>）的数组）<para/>
            <paramref name="items"></paramref>（物品模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name"/>）的数组）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.MapsDepend">
            <summary>
            模组所使用的地图组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.CharactersDepend">
            <summary>
            模组所使用的角色组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.SkillsDepend">
            <summary>
            模组所使用的技能组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.ItemsDepend">
            <summary>
            模组所使用的物品组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Maps">
            <summary>
            实际使用的地图组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Characters">
            <summary>
            实际使用的角色组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Skills">
            <summary>
            实际使用的技能组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Items">
            <summary>
            实际使用的物品组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)">
            <summary>
            获得所有的依赖项<para/>
            此方法会自动填充 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Maps"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Characters"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Skills"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Items"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Name">
            <summary>
            服务器模组的名称<para/>
            如果服务器模组配合一个相关联的模组使用，那么它们的 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name"/> 名称必须相同。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.DefaultMap">
            <summary>
            默认地图
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.GameModuleDepend">
            <summary>
            模组的依赖集合
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.IsAnonymous">
            <summary>
            是否是匿名服务器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IGameModuleServer}#Controller">
            <summary>
            base控制器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.GamingObjects">
            <summary>
            此模组所有正在运行的游戏对象
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.StartServer(Milimoe.FunGame.Core.Library.Common.Addon.GamingObject,System.Object[])">
            <summary>
            启动服务器监听 请在此处实现服务器逻辑。注意，此方法必须立即返回
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.GamingMessageHandler(Milimoe.FunGame.Core.Interface.Base.IServerModel,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            接收并处理GamingMessage
            </summary>
            <param name="model">发送此消息的客户端</param>
            <param name="type">消息类型</param>
            <param name="data">消息参数</param>
            <returns>底层会将字典中的数据发送给客户端</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.StartAnonymousServer(Milimoe.FunGame.Core.Interface.Base.IServerModel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            启动匿名服务器监听
            </summary>
            <param name="model"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.CloseAnonymousServer(Milimoe.FunGame.Core.Interface.Base.IServerModel)">
            <summary>
            结束匿名服务器监听
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.AnonymousGameServerHandler(Milimoe.FunGame.Core.Interface.Base.IServerModel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            接收并处理匿名服务器监听消息<para/>
            此方法为可选实现，可以帮助 RESTful API 处理不需要验证的 WebSocket 请求
            </summary>
            <param name="model">发送此消息的客户端</param>
            <param name="data">消息参数</param>
            <returns>底层会将字典中的数据发送给客户端</returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.AfterLoad(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])">
            <summary>
            模组完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.SendEndGame(Milimoe.FunGame.Core.Library.Common.Addon.GamingObject)">
            <summary>
            给所有客户端发送游戏结束通知
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.SendGamingMessage(System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Interface.Base.IServerModel},Milimoe.FunGame.Core.Library.Constant.GamingType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            给客户端发送局内消息
            </summary>
            <param name="clients"></param>
            <param name="type"></param>
            <param name="data"></param>
            <returns>发送失败的客户端</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Send(System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Interface.Base.IServerModel},Milimoe.FunGame.Core.Library.Constant.SocketMessageType,System.Object[])">
            <summary>
            给客户端发送消息
            </summary>
            <param name="clients"></param>
            <param name="type"></param>
            <param name="args"></param>
            <returns>发送失败的客户端</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.SendAnonymousGameServerMessage(System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Interface.Base.IServerModel},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            给客户端发送匿名服务器消息
            </summary>
            <param name="clients"></param>
            <param name="data"></param>
            <returns>发送失败的客户端</returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Empty">
            <summary>
            空格子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Id">
            <summary>
            格子编号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.X">
            <summary>
            格子在地图中的x坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Y">
            <summary>
            格子在地图中的y坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Z">
            <summary>
            格子在地图中的z坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Characters">
            <summary>
            是谁站在这格子上？
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Effects">
            <summary>
            此格子目前受到了什么影响？
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Color">
            <summary>
            此格子呈现的颜色（默认为 <see cref="P:System.Drawing.Color.Gray"/> ）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Grid.ToString">
            <summary>
            默认的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Items">
            <summary>
            此模组中包含的物品
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.ItemFactory">
            <summary>
            注册工厂
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Version">
            <summary>
            插件版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Author">
            <summary>
            插件作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IPlugin}#Controller">
            <summary>
            base控制器，没有DataRequest
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Load(System.Object[])">
            <summary>
            加载插件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.AfterLoad(Milimoe.FunGame.Core.Api.Utility.PluginLoader,System.Object[])">
            <summary>
            插件完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BeforeLoad(System.Object[])">
            <summary>
            允许返回false来阻止加载此插件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Init(System.Object[])">
            <summary>
            传递一些插件可以用参数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Session">
            <summary>
            Session对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Config">
            <summary>
            Config对象
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BeforeLoad(System.Object[])"/>后触发
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Version">
            <summary>
            插件版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Author">
            <summary>
            插件作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IPlugin}#Controller">
            <summary>
            base控制器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.Load(System.Object[])">
            <summary>
            加载插件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.ProcessInput(System.String)">
            <summary>
            接收服务器控制台的输入
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.AfterLoad(Milimoe.FunGame.Core.Api.Utility.ServerPluginLoader,System.Object[])">
            <summary>
            插件完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.BeforeLoad(System.Object[])">
            <summary>
            允许返回false来阻止加载此插件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin.BeforeLoad(System.Object[])"/>后触发
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Skills">
            <summary>
            此模组中包含的技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.SkillFactory">
            <summary>
            注册工厂
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.EffectFactory">
            <summary>
            注册工厂（特效类）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Version">
            <summary>
            插件版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Author">
            <summary>
            插件作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IAddon}#Controller">
            <summary>
            base控制器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin._isLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.Load(System.Object[])">
            <summary>
            加载插件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.ProcessInput(System.String)">
            <summary>
            接收服务器控制台的输入
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.AfterLoad(Milimoe.FunGame.Core.Api.Utility.WebAPIPluginLoader,System.Object[])">
            <summary>
            插件完全加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.BeforeLoad(System.Object[])">
            <summary>
            允许返回false来阻止加载此插件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.OnWebAPIStarted(System.Object[])">
            <summary>
            当 Web API 服务启动完成后触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin.BeforeLoad(System.Object[])"/>后触发
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1">
            <summary>
            继承这个类可以获得异步等待的功能
            <para>参考实现 <see cref="T:Milimoe.FunGame.Core.Controller.SocketHandlerController"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.ReceivedObject">
            <summary>
            接收到的实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.Working">
            <summary>
            是否处于等待的状态
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.SetWorking">
            <summary>
            异步操作前，请设置为等待状态
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.WaitForWorkDone">
            <summary>
            等待任务完成（需要自己异步）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.WaitForWorkDoneAsync">
            <summary>
            异步等待任务完成
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter">
            <summary>
            任务的等待器，可以设置在任务完成后需要的操作
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.IsCompleted">
            <summary>
            任务是否完成
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.Exception">
            <summary>
            捕获到的异常
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.awaiter">
            <summary>
            <para>内部实现类</para>
            实现参见 <see cref="T:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.#ctor(Milimoe.FunGame.Core.Interface.Base.ITaskAwaiter)">
            <summary>
            构造一个等待器
            </summary>
            <param name="awaiter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            返回 TaskAwaiter 可以进一步等待并执行方法<para/>
            注意事项：async () 委托的后续 OnCompleted 方法将不会进一步等待，而是直接执行，因为它是异步的<para/>
            <example>
            这意味着你不能这样操作：
            <code>
            TaskUtility.NewTask(() =>
            {
                Console.WriteLine(0);
            }).OnCompleted(async () =>
            {
                await Task.Delay(3000);
                Console.WriteLine(1);
            }).OnCompleted(() =>
            {
                Console.WriteLine(2);
            });
            </code>
            上述代码将导致：任务输出 0 之后，2 不会等待 1 的完成，因此会直接输出 2，再输出 1.
            </example>
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.OnError(System.Action{System.Exception})">
            <summary>
            在捕获到异常时，将触发Error事件
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient.HttpGet``1(System.String)">
            <summary>
            发送 GET 请求
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient.HttpPost``1(System.String,System.String)">
            <summary>
            发送 POST 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Sender">
            <summary>
            发件人邮箱
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.SenderName">
            <summary>
            发件人名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Body">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Priority">
            <summary>
            邮件优先级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.HTML">
            <summary>
            内容是否支持HTML
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.ToList">
            <summary>
            收件人列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.CCList">
            <summary>
            抄送列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.BCCList">
            <summary>
            密送列表
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            使用MailSender工具类创建邮件对象
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象
            </summary>
            <param name="sender"></param>
            <param name="senderName"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象，同时写主题、内容、单个收件人
            </summary>
            <param name="sender"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="to"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象，同时写主题、内容、单个收件人、单个抄送
            </summary>
            <param name="sender"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="to"></param>
            <param name="cc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            完整的创建邮件对象
            </summary>
            <param name="sender"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="priority"></param>
            <param name="html"></param>
            <param name="toList"></param>
            <param name="ccList"></param>
            <param name="bccList"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Send(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            发送邮件
            -- 适合创建一次性邮件并发送 --
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddTo(System.String)">
            <summary>
            添加收件人
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddTo(System.String[])">
            <summary>
            添加多个收件人
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddCC(System.String)">
            <summary>
            添加抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddCC(System.String[])">
            <summary>
            添加多个抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddBCC(System.String)">
            <summary>
            添加密送
            </summary>
            <param name="bcc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddBCC(System.String[])">
            <summary>
            添加多个密送
            </summary>
            <param name="bcc"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Network.SocketObject">
            <summary>
            唯一指定的通信数据结构
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.SocketType">
            <summary>
            通信类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.Token">
            <summary>
            通信令牌
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.Length">
            <summary>
            参数数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.Item(System.Int32)">
            <summary>
            从参数列表中获取指定索引的参数的Json对象<para/>
            -- 此索引器仅返回Json对象，获取实例请使用反序列化方法GetParam[T]() --<para/>
            -- 当然也可以自己反序列化 --<para/>
            -- 基本类型可能有效，但仍建议使用反序列化方法 --
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.IndexOutOfArrayLengthException">索引超过数组上限</exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.#ctor(Milimoe.FunGame.Core.Library.Constant.SocketMessageType,System.Guid,System.Object[])">
            <summary>
            构建通信数据对象
            </summary>
            <param name="socketType"></param>
            <param name="token"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.GetParam``1(System.Int32)">
            <summary>
            从参数列表中获取指定类型和索引的参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">索引</param>
            <returns>类型的参数</returns>
            <exception cref="T:Milimoe.FunGame.IndexOutOfArrayLengthException">索引超过数组上限</exception>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/> 使用，也别忘了修改 <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.SocketSet">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.SocketMessageType"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.SocketSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.SocketMessageType)">
            <summary>
            将通信类型的枚举转换为字符串
            </summary>
            <param name="type">通信类型</param>
            <returns>等效字符串</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.DataRequestSet">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType"/>
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.RunTime_Logout">
            RunTime
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Main_GetNotice">
            Main
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Reg_Reg">
            Register
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Login_Login">
            Login
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Room_UpdateRoomSettings">
            Room
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.UserCenter_UpdateUser">
            UserCenter
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Inventory_GetStore">
            Inventory
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.GamingSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.RoomSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.RoomType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.RoomSet.GetRoomType(System.String)">
            <summary>
            获取字符串对应的枚举
            </summary>
            <param name="typestring"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame_DebugMode">
            <summary>
            添加-debug启动项将开启DebugMode（仅适用于Desktop或Console）
            <para>目前支持禁用心跳检测功能</para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame_Version">
            <summary>
            核心库的版本号
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.General">
            <summary>
            此类保存常用的对象常量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.OpenFactory">
            <summary>
            支持动态扩展的工厂实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.EntityInstance">
            <summary>
            空的实体类 用于object返回
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.UnknownUserInstance">
            <summary>
            默认的未知用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GuestUserInstance">
            <summary>
            游客用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.LocalUserInstance">
            <summary>
            本地用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.HallInstance">
            <summary>
            大厅（空房间）实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.DefaultEncoding">
            <summary>
            默认的字符编码
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GeneralDateTimeFormat">
            <summary>
            默认的时间格式 yyyy-MM-dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GeneralDateTimeFormatChinese">
            <summary>
            yyyy年MM月dd日 HH:mm:ss
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GeneralDateTimeFormatTimeOnly">
            <summary>
            HH:mm:ss
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.DefaultTime">
            <summary>
            默认的时间值（1970年8月1日8点0分0秒）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GameplayEquilibriumConstant">
            <summary>
            游戏平衡常数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxRetryTimes">
            <summary>
            最多自动重试连接次数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_1C2G">
            <summary>
            1C2G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_2C2G">
            <summary>
            2C2G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_4C4G">
            <summary>
            4C4G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.SocketByteSize">
            <summary>
            默认Socket数据包大小
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.StreamByteSize">
            <summary>
            默认Stream传输大小
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod">
            <summary>
            ��� <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/> ʹ�ã�Ҳ�������޸� <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.CharacterState">
            <summary>
            角色目前所处的状态
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.Actionable">
            <summary>
            可以行动 [ 战斗相关 ] [ 常态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.NotActionable">
            <summary>
            完全行动不能 [ 战斗相关 ] [ 控制态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.ActionRestricted">
            <summary>
            行动受限 [ 战斗相关 ] [ 控制态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.BattleRestricted">
            <summary>
            战斗不能 [ 战斗相关 ] [ 控制态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.SkillRestricted">
            <summary>
            技能受限 [ 战斗相关 ] [ 控制态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.AttackRestricted">
            <summary>
            攻击受限 [ 战斗相关 ] [ 控制态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.Casting">
            <summary>
            处于吟唱中 [ 战斗相关 ] [ 技能相关 ] [ 吟唱态 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.PreCastSuperSkill">
            <summary>
            预释放爆发技(插队) [ 战斗相关 ] [ 技能相关 ] [ 吟唱态 ]
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/> 使用，也别忘了修改 <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.RoomType">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.RoomSet"/> 使用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.SocketMessageType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.SocketSet"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestSet"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.GamingType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingSet"/>
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Magic">
            <summary>
            魔法，编号 1xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Skill">
            <summary>
            战技，编号 2xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.SuperSkill">
            <summary>
            爆发技，编号 3xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Passive">
            <summary>
            被动，编号 4xxx（物品被动从5xxx开始）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Item">
            <summary>
            物品的主动技能，编号 6xxx
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.EffectType">
            <summary>
            注意：具有控制效果的特效，应该和技能本身的特效(一般此项为None)区分开来。此效果被赋值会改变一些判断的结果。
            <para>关联方法：</para>
            <para><see cref="M:Milimoe.FunGame.Core.Library.Constant.SkillSet.GetCharacterStateByEffectType(Milimoe.FunGame.Core.Library.Constant.EffectType)"/></para>
            <para><see cref="M:Milimoe.FunGame.Core.Library.Constant.SkillSet.GetDispelledTypeByEffectType(Milimoe.FunGame.Core.Library.Constant.EffectType)"/></para>
            <para><see cref="M:Milimoe.FunGame.Core.Library.Constant.SkillSet.GetEffectTypeName(Milimoe.FunGame.Core.Library.Constant.EffectType)"/></para>
            <para><see cref="M:Milimoe.FunGame.Core.Library.Constant.SkillSet.GetIsDebuffByEffectType(Milimoe.FunGame.Core.Library.Constant.EffectType)"/></para>
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.None">
            <summary>
            无特殊效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Item">
            <summary>
            这是来自装备的特效
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Mark">
            <summary>
            标记，目标受到某些技能的标记
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Stun">
            <summary>
            眩晕，目标无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Freeze">
            <summary>
            冰冻，目标无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Silence">
            <summary>
            沉默，目标无法使用技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Root">
            <summary>
            定身
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Fear">
            <summary>
            恐惧
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Sleep">
            <summary>
            睡眠，目标暂时无法行动，受到伤害后会苏醒
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Knockback">
            <summary>
            击退
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Knockdown">
            <summary>
            击倒，目标被击倒在地，暂时无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Taunt">
            <summary>
            嘲讽，目标被迫攻击施法者
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Slow">
            <summary>
            减速，目标行动速度或加速系数降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Weaken">
            <summary>
            衰弱，目标的攻击和防御降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Poison">
            <summary>
            中毒，目标在一段时间内持续受到伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Burn">
            <summary>
            燃烧，目标受到伤害，持续一段时间
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Bleed">
            <summary>
            流血，目标持续受到伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Blind">
            <summary>
            致盲，目标无法准确攻击，命中率降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Cripple">
            <summary>
            致残，减少目标的行动或攻击能力
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Shield">
            <summary>
            护盾，减少受到的伤害或抵消部分伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.HealOverTime">
            <summary>
            持续治疗，逐步恢复生命值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Haste">
            <summary>
            加速，提升行动速度
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Invulnerable">
            <summary>
            无敌，暂时不会受到任何伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Unselectable">
            <summary>
            不可选中，无法成为普攻和技能的目标
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.DamageBoost">
            <summary>
            伤害提升，增加攻击输出
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.DefenseBoost">
            <summary>
            物理护甲/魔法抗性提升，减少所受伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.CritBoost">
            <summary>
            暴击提升，增加暴击率或暴击伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.MPRegen">
            <summary>
            魔法恢复，增加魔法值回复速度
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.PenetrationBoost">
            <summary>
            破甲，提高物理/魔法穿透
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.MagicResistBreak">
            <summary>
            降低魔法抗性，目标更容易受到魔法伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Curse">
            <summary>
            诅咒，降低目标的属性或给予负面效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Exhaustion">
            <summary>
            疲劳，减少目标的攻击或技能效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.ManaBurn">
            <summary>
            魔力燃烧，消耗目标的魔法值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Charm">
            <summary>
            魅惑，控制目标替施法者作战
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Disarm">
            <summary>
            缴械，目标无法进行普通攻击
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Confusion">
            <summary>
            混乱，目标的行动变得随机化
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Petrify">
            <summary>
            石化，目标无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.SilenceMagic">
            <summary>
            法术沉默，目标无法施放魔法技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Banish">
            <summary>
            放逐，目标暂时无法被攻击，也无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Doom">
            <summary>
            毁灭，目标在倒计时结束后受到大量伤害或死亡
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.PhysicalImmune">
            <summary>
            物理免疫
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.MagicalImmune">
            <summary>
            魔法免疫
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.SkilledImmune">
            <summary>
            技能免疫
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.AllImmune">
            <summary>
            完全免疫：物理免疫 + 技能免疫
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.EvadeBoost">
            <summary>
            闪避提升
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Lifesteal">
            <summary>
            生命偷取
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.GrievousWound">
            <summary>
            重伤，目标受到的治疗效果降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.WeakDispelling">
            <summary>
            持续性弱驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.StrongDispelling">
            <summary>
            持续性强驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Recovery">
            <summary>
            恢复
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Vulnerable">
            <summary>
            易伤
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectType.Delay">
            <summary>
            迟滞，硬直时间延长
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.MagicCardPack">
            <summary>
            魔法卡包 编号 10xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Weapon">
            <summary>
            武器 编号 11xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Armor">
            <summary>
            防具 编号 12xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Shoes">
            <summary>
            鞋子 编号 13xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Accessory">
            <summary>
            饰品 编号 14xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Consumable">
            <summary>
            消耗品 编号 15xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.MagicCard">
            <summary>
            魔法卡 编号 16xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Collectible">
            <summary>
            收藏品 编号 17xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.SpecialItem">
            <summary>
            特殊物品 编号 18xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.QuestItem">
            <summary>
            任务物品 编号 19xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.GiftBox">
            <summary>
            礼包 编号 20xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.ItemType.Others">
            <summary>
            其他 编号 21xxx
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.EquipSlotType">
            <summary>
            指示物品在哪个栏位上
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.None">
            <summary>
            不是武器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.OneHandedSword">
            <summary>
            单手剑
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.TwoHandedSword">
            <summary>
            双手重剑
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Bow">
            <summary>
            弓
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Pistol">
            <summary>
            手枪
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Rifle">
            <summary>
            步枪
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.DualDaggers">
            <summary>
            双持短刀
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Talisman">
            <summary>
            法器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Staff">
            <summary>
            法杖
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Polearm">
            <summary>
            长柄
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.Gauntlet">
            <summary>
            拳套
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.WeaponType.HiddenWeapon">
            <summary>
            暗器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OfferorRevise">
            <summary>
            报价发起方修改报价，
            如果当前状态为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Created"/>（已创建） 和 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Negotiating"/>（协商中），
            则状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.PendingOfferorConfirmation"/>（等待发起方确认）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OfferorConfirm">
            <summary>
            报价发起方确认报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.OfferorConfirmed"/>（发起方已确认）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OfferorSend">
            <summary>
            报价发起方发送报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Sent"/>（已发送）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OffereeRevise">
            <summary>
            报价接收方修改报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.PendingOffereeConfirmation"/>（等待接收方确认）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OffereeConfirm">
            <summary>
            报价接收方确认报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.OffereeConfirmed"/>（接收方已确认）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OffereeSend">
            <summary>
            报价接收方发送报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Negotiating"/>（协商中）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OfferorAccept">
            <summary>
            报价发起方同意接收方的协商，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.NegotiationAccepted"/>（协商已接受）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OfferorCancel">
            <summary>
            报价发起方手动取消了报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Cancelled"/>（已取消）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OffereeAccept">
            <summary>
            报价接收方同意报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Completed"/>（已完成）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.OfferActionType.OffereeReject">
            <summary>
            报价接收方拒绝报价，状态转为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.OfferState.Rejected"/>（已拒绝）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.None">
            <summary>
            无驱散 [ 默认，不能驱散其他特效 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.Weak">
            <summary>
            弱驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.DurativeWeak">
            <summary>
            持续性弱驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.TemporaryWeak">
            <summary>
            临时弱驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.Strong">
            <summary>
            强驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.DurativeStrong">
            <summary>
            持续性强驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.TemporaryStrong">
            <summary>
            临时强驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelType.Special">
            <summary>
            特殊驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelledType.Weak">
            <summary>
            可弱驱散 [ 默认 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelledType.Strong">
            <summary>
            需强驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelledType.Special">
            <summary>
            需特殊驱散
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DispelledType.CannotBeDispelled">
            <summary>
            不可驱散 [ 最高优先级 ]
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.ImmuneType">
            <summary>
            标准实现的免疫类型
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.SQLScript.Constant.Command_Select">
            Commands
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.ActionQueue">
            <summary>
            行动顺序表管理器，对 <see cref="T:Milimoe.FunGame.Core.Model.GamingQueue"/> 的封装
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.ActionQueue.NewGame(Milimoe.FunGame.Core.Library.Constant.RoomType,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Action{System.String})">
            <summary>
            按房间类型创建行动顺序表
            </summary>
            <param name="type"></param>
            <param name="characters"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.EquilibriumConstant">
            <summary>
            游戏平衡常数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InGameCurrency">
            <summary>
            游戏货币名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InGameMaterial">
            <summary>
            游戏材料名称（第二货币）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InGameTime">
            <summary>
            游戏时间名称（如技能冷却、硬直）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PromotionsUpperLimit">
            <summary>
            晋升点数上限
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.UseMagicType">
            <summary>
            使用的魔法类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialHP">
            <summary>
            初始生命值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialMP">
            <summary>
            初始魔法值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxLevel">
            <summary>
            角色最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.EXPUpperLimit">
            <summary>
            经验值上限
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.UseLevelBreak">
            <summary>
            使用等级突破机制
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.LevelBreakList">
            <summary>
            使用等级突破机制后，角色处于这些等级时需要突破才能继续升级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxMagicLevel">
            <summary>
            魔法最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxSkillLevel">
            <summary>
            战技最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxSuperSkillLevel">
            <summary>
            爆发技最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxPassiveSkillLevel">
            <summary>
            被动最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxNormalAttackLevel">
            <summary>
            普通攻击最高等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MaxEP">
            <summary>
            最大能量值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialATK">
            <summary>
            初始攻击力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialDEF">
            <summary>
            初始物理护甲
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialSTR">
            <summary>
            初始力量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialAGI">
            <summary>
            初始敏捷
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.InitialINT">
            <summary>
            初始智力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.STRGrowth">
            <summary>
            力量成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.AGIGrowth">
            <summary>
            敏捷成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTGrowth">
            <summary>
            智力成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.CritRate">
            <summary>
            初始暴击率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.CritDMG">
            <summary>
            初始暴击伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.EvadeRate">
            <summary>
            初始闪避率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.LevelToHPFactor">
            <summary>
            每级增加基础生命值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.HPGrowthFactor">
            <summary>
            生命值增长因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.LevelToMPFactor">
            <summary>
            每级增加基础魔法值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.MPGrowthFactor">
            <summary>
            魔法值增长因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.LevelToATKFactor">
            <summary>
            每级增加基础攻击力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.ATKGrowthFactor">
            <summary>
            攻击力增长因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DEFReductionFactor">
            <summary>
            物理伤害减免因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.SPDUpperLimit">
            <summary>
            行动速度上限
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.STRtoHPFactor">
            <summary>
            每 1 点力量增加生命值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.STRtoHRFactor">
            <summary>
            每 1 点力量增加生命回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.STRtoDEFFactor">
            <summary>
            每 1 点力量增加物理护甲
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.STRtoCritDMGMultiplier">
            <summary>
            每 1 点力量增加暴击伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoMPFactor">
            <summary>
            每 1 点智力增加魔法值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoCDRMultiplier">
            <summary>
            每 1 点智力增加冷却缩减
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoMRFactor">
            <summary>
            每 1 点智力增加魔法回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoCastMPReduce">
            <summary>
            每 1 点智力减少魔法消耗
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoCastEPReduce">
            <summary>
            每 1 点智力减少能量消耗
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.INTtoAccelerationCoefficientMultiplier">
            <summary>
            每 1 点智力增加加速系数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.AGItoSPDMultiplier">
            <summary>
            每 1 点敏捷增加行动速度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.AGItoCritRateMultiplier">
            <summary>
            每 1 点敏捷增加暴击率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.AGItoEvadeRateMultiplier">
            <summary>
            每 1 点敏捷增加闪避率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DamageGetEPFactor">
            <summary>
            造成伤害获得能量值因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DamageGetEPMax">
            <summary>
            造成伤害获得能量值上限
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TakenDamageGetEPFactor">
            <summary>
            受到伤害获得能量值因子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TakenDamageGetEPMax">
            <summary>
            受到伤害获得能量值上限
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.OneHandedSwordBaseMultiplier">
            <summary>
            单手剑的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.OneHandedSwordLevelBonus">
            <summary>
            单手剑的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TwoHandedSwordBaseMultiplier">
            <summary>
            双手剑的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TwoHandedSwordLevelBonus">
            <summary>
            双手剑的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.BowBaseMultiplier">
            <summary>
            弓的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.BowLevelBonus">
            <summary>
            弓的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PistolBaseMultiplier">
            <summary>
            手枪的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PistolLevelBonus">
            <summary>
            手枪的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RifleBaseMultiplier">
            <summary>
            步枪的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RifleLevelBonus">
            <summary>
            步枪的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DualDaggersBaseMultiplier">
            <summary>
            双持短刀的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DualDaggersLevelBonus">
            <summary>
            双持短刀的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TalismanBaseMultiplier">
            <summary>
            法器的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TalismanLevelBonus">
            <summary>
            法器的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.StaffBaseMultiplier">
            <summary>
            法杖的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.StaffLevelBonus">
            <summary>
            法杖的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PolearmBaseMultiplier">
            <summary>
            长柄武器的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PolearmLevelBonus">
            <summary>
            长柄武器的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.GauntletBaseMultiplier">
            <summary>
            拳套的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.GauntletLevelBonus">
            <summary>
            拳套的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.HiddenWeaponBaseMultiplier">
            <summary>
            暗器的基础伤害倍率
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.HiddenWeaponLevelBonus">
            <summary>
            暗器的基础伤害倍率成长
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.OneHandedSwordHardness">
            <summary>
            单手剑的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TwoHandedSwordHardness">
            <summary>
            双手剑的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.BowHardness">
            <summary>
            弓的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PistolHardness">
            <summary>
            手枪的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RifleHardness">
            <summary>
            步枪的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DualDaggersHardness">
            <summary>
            双持短刀的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TalismanHardness">
            <summary>
            法器的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.StaffHardness">
            <summary>
            法杖的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PolearmHardness">
            <summary>
            长柄武器的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.GauntletHardness">
            <summary>
            拳套的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.HiddenWeaponHardness">
            <summary>
            暗器的硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.OneHandedSwordAttackRange">
            <summary>
            单手剑的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TwoHandedSwordAttackRange">
            <summary>
            双手剑的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.BowAttackRange">
            <summary>
            弓的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PistolAttackRange">
            <summary>
            手枪的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RifleAttackRange">
            <summary>
            步枪的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.DualDaggersAttackRange">
            <summary>
            双持短刀的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.TalismanAttackRange">
            <summary>
            法器的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.StaffAttackRange">
            <summary>
            法杖的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.PolearmAttackRange">
            <summary>
            长柄武器的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.GauntletAttackRange">
            <summary>
            拳套的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.HiddenWeaponAttackRange">
            <summary>
            暗器的攻击距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RoleMOV_Core">
            <summary>
            核心角色的移动距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RoleMOV_Vanguard">
            <summary>
            先锋角色的移动距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RoleMOV_Guardian">
            <summary>
            近卫角色的移动距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RoleMOV_Support">
            <summary>
            支援角色的移动距离
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.EquilibriumConstant.RoleMOV_Medic">
            <summary>
            治疗角色的移动距离
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.EquilibriumConstant.SetEquilibriumConstant(Milimoe.FunGame.Core.Entity.BaseEntity[])">
            <summary>
            应用此游戏平衡常数给实体
            </summary>
            <param name="entities"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoConnect">
            <summary>
            是否自动连接服务器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoLogin">
            <summary>
            是否自动登录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isMatching">
            <summary>
            是否在匹配中
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isConnected">
            <summary>
            是否连接上服务器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isRetrying">
            <summary>
            是否正在重连
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoRetry">
            <summary>
            是否自动重连
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isInRoom">
            <summary>
            是否在房间中
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_RoomType">
            <summary>
            当前所处的房间类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_Notice">
            <summary>
            公告
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginUser">
            <summary>
            自动登录的账号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginPassword">
            <summary>
            自动登录的密码
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginKey">
            <summary>
            自动登录的秘钥
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.Gaming">
            <summary>
            游戏局内类
            客户端需要使用创建此类单例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.GameModule">
            <summary>
            使用的模组实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.EventArgs">
            <summary>
            游戏的参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.CurrentUser">
            <summary>
            此实例所属的玩家
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.Gaming.StartGame(Milimoe.FunGame.Core.Library.Common.Addon.GameModule,Milimoe.FunGame.Core.Entity.Room,Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.User},Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])">
            <summary>
            传入游戏所需的参数，构造一个Gaming实例
            </summary>
            <param name="module"></param>
            <param name="room"></param>
            <param name="user"></param>
            <param name="users"></param>
            <param name="loader"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.Gaming.GamingHandler(Milimoe.FunGame.Core.Library.Constant.GamingType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            需在RunTimeController的SocketHandler_Gaming方法中调用此方法
            <para>客户端也可以参照此方法自行实现</para>
            <para>此方法目的是为了触发 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 的局内事件实现</para>
            </summary>
            <param name="type">消息类型</param>
            <param name="data">接收到的数据</param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.GamingQueue">
            <summary>
            提供一个基础的回合制游戏队列基类实现，可继承扩展
            <para/>该默认实现为混战模式 <see cref="F:Milimoe.FunGame.Core.Library.Constant.RoomType.Mix"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.GameplayEquilibriumConstant">
            <summary>
            使用的游戏平衡常数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.WriteLine">
            <summary>
            用于文本输出
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.AllCharacters">
            <summary>
            参与本次游戏的所有角色列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.Original">
            <summary>
            原始的角色字典
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.Queue">
            <summary>
            当前的行动顺序
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.HardnessTime">
            <summary>
            硬直时间表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.Eliminated">
            <summary>
            当前已死亡的角色顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.CharactersInAI">
            <summary>
            角色是否在 AI 控制下
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.CharacterStatistics">
            <summary>
            角色数据
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.TotalTime">
            <summary>
            游戏运行的时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.TotalRound">
            <summary>
            游戏运行的回合
            对于某角色而言，在其行动的回合叫 Turn，而所有角色行动的回合，都称之为 Round。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.FirstKiller">
            <summary>
            第一滴血获得者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.MaxRespawnTimes">
            <summary>
            最大复活次数 [ 不为 0 时开启死斗模式 ]
            0：不复活 / -1：无限复活
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.RespawnTimes">
            <summary>
            复活次数统计
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.RespawnCountdown">
            <summary>
            复活倒计时
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.MaxScoreToWin">
            <summary>
            最大获胜积分
            设置一个大于0的数以启用
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.LastRound">
            <summary>
            上回合记录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.Rounds">
            <summary>
            所有回合的记录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.RoundRewards">
            <summary>
            回合奖励
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.CustomData">
            <summary>
            自定义数据
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.EarnedMoney">
            <summary>
            金币奖励记录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.GamingQueue.Map">
            <summary>
            使用的地图
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._allCharacters">
            <summary>
            参与本次游戏的所有角色列表
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._original">
            <summary>
            原始的角色字典
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._queue">
            <summary>
            当前的行动顺序
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._eliminated">
            <summary>
            当前已死亡的角色顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._charactersInAIBySystem">
            <summary>
            角色是否在 AI 控制下 [ 系统控制 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._charactersInAIByUser">
            <summary>
            角色是否在 AI 控制下 [ 玩家手动设置 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._hardnessTimes">
            <summary>
            硬直时间表
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._castingSkills">
            <summary>
            角色正在吟唱的技能（通常是魔法）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._castingSuperSkills">
            <summary>
            角色预释放的爆发技
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._willUseItems">
            <summary>
            角色即将使用的物品
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._earnedMoney">
            <summary>
            角色目前赚取的金钱
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._maxContinuousKilling">
            <summary>
            角色最高连杀数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._continuousKilling">
            <summary>
            角色目前的连杀数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._cutCount">
            <summary>
            角色被插队次数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._assistDetail">
            <summary>
            助攻伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._stats">
            <summary>
            角色数据
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._respawnTimes">
            <summary>
            复活次数统计
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._respawnCountdown">
            <summary>
            复活倒计时
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._roundDeaths">
            <summary>
            当前回合死亡角色
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._roundRewards">
            <summary>
            回合奖励
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._factoryRoundRewardEffects">
            <summary>
            回合奖励的特效工厂
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._isGameEnd">
            <summary>
            游戏是否结束
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._isInRound">
            <summary>
            是否在回合内
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.GamingQueue._map">
            <summary>
            使用的地图
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.#ctor(System.Action{System.String},Milimoe.FunGame.Core.Library.Common.Addon.GameMap)">
            <summary>
            新建一个基础回合制游戏队列
            </summary>
            <param name="writer">用于文本输出</param>
            <param name="map">游戏地图</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.#ctor(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Action{System.String},Milimoe.FunGame.Core.Library.Common.Addon.GameMap)">
            <summary>
            新建一个基础回合制游戏队列并初始化角色
            </summary>
            <param name="characters">参与本次游戏的角色列表</param>
            <param name="writer">用于文本输出</param>
            <param name="map">游戏地图</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.LoadGameMap(Milimoe.FunGame.Core.Library.Common.Addon.GameMap)">
            <summary>
            加载地图
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.InitCharacters(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            初始化角色表
            </summary>
            <param name="characters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.InitActionQueue">
            <summary>
            初始化行动顺序表
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.AddCharacter(Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            将角色加入行动顺序表
            </summary>
            <param name="character"></param>
            <param name="hardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.ClearQueue">
            <summary>
            清空行动队列
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.NextCharacterAsync">
            <summary>
            从行动顺序表取出第一个角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.TimeLapse">
            <summary>
            时间进行流逝，减少硬直时间，减少技能冷却时间，角色也会因此回复状态
            </summary>
            <returns>流逝的时间</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.DisplayQueue">
            <summary>
            显示当前所有角色的状态和硬直时间
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.ProcessTurnAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色 <paramref name="character"/> 的回合进行中
            </summary>
            <param name="character"></param>
            <returns>是否结束游戏</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.ProcessCharacterDeathAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            处理角色死亡
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetTeammates(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取某角色的团队成员
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.AfterCharacterAction(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.CharacterActionType)">
            <summary>
            角色行动后触发
            </summary>
            <param name="character"></param>
            <param name="type"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算时触发
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.AfterDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算完成后触发
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetRespawnTime(Milimoe.FunGame.Core.Entity.Character,System.Int32)">
            <summary>
            获取复活时间
            </summary>
            <param name="character"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.BeforeTurnAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            回合开始前触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.AfterTurnAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            回合结束后触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.DamageToEnemyAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            对敌人造成伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculationAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculationByTeammateAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算，击杀队友的情况
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.HealToTargetAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            治疗一个目标
            </summary>
            <param name="actor"></param>
            <param name="target"></param>
            <param name="heal"></param>
            <param name="canRespawn"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.DealWithCharacterDied(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            需要处理复活和解除施法等
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.UseItemAsync(Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            使用物品实际逻辑
            </summary>
            <param name="item"></param>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="castRange"></param>
            <param name="desiredTargets"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CharacterMoveAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            角色移动实际逻辑
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <param name="startGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetActionType(System.Double,System.Double,System.Double)">
            <summary>
            通过概率计算角色要干嘛
            </summary>
            <param name="pUseItem"></param>
            <param name="pCastSkill"></param>
            <param name="pNormalAttack"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SelectTargetGridAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Library.Common.Addon.GameMap,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取移动目标
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="map"></param>
            <param name="moveRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SelectTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取技能目标
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="castRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SelectTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.NormalAttack,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取普通攻击目标
            </summary>
            <param name="character"></param>
            <param name="attack"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="attackRange"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CheckCanCast(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Double@)">
            <summary>
            检查是否可以释放技能
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CheckCanCast(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,System.Double@,System.Double@)">
            <summary>
            检查是否可以释放技能（物品版）
            </summary>
            <param name="caster"></param>
            <param name="item"></param>
            <param name="costMP"></param>
            <param name="costEP"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CalculatePhysicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,System.Double,System.Double@,System.Int32@)">
            <summary>
            计算物理伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <param name="changeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CalculateMagicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double,System.Double@,System.Int32@)">
            <summary>
            计算魔法伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="magicType"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <param name="changeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetEP(System.Double,System.Double,System.Double)">
            <summary>
            获取EP
            </summary>
            <param name="a">参数1</param>
            <param name="b">参数2</param>
            <param name="max">最大获取量</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.IsTeammate(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            判断目标对于某个角色是否是队友（不包括自己）
            </summary>
            <param name="character"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetIsTeammateDictionary(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            获取目标对于某个角色是否是友方的字典（包括自己）
            </summary>
            <param name="character"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.InitRoundRewards(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int64,System.Boolean},System.Func{System.Int64,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            初始化回合奖励
            </summary>
            <param name="maxRound">最大回合数</param>
            <param name="maxRewardsInRound">每个奖励回合生成多少技能</param>
            <param name="effects">key: 特效的数字标识符；value: 是否是主动技能的特效</param>
            <param name="factoryEffects">通过数字标识符来获取构造特效的参数</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.GetRoundRewards(System.Int32,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取回合奖励
            </summary>
            <param name="round"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.RemoveRoundRewards(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill})">
            <summary>
            移除回合奖励
            </summary>
            <param name="character"></param>
            <param name="skills"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.WillPreCastSuperSkill">
            <summary>
            是否在回合外释放爆发技插队（仅自动化，手动设置请调用：<see cref="M:Milimoe.FunGame.Core.Model.GamingQueue.SetCharacterPreCastSuperSkill(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill)"/>）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法
            </summary>
            <param name="caster"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.InterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法 [ 用于使敌人目标丢失 ]
            </summary>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SetCharacterRespawn(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            设置角色复活
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SetCharacterPreCastSuperSkill(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill)">
            <summary>
            设置角色将预释放爆发技
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SetNotDamageAssistTime(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            设置角色对目标们的非伤害辅助时间
            </summary>
            <param name="character"></param>
            <param name="targets"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.ChangeCharacterHardnessTime(Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean)">
            <summary>
            修改角色的硬直时间
            </summary>
            <param name="character">角色</param>
            <param name="addValue">加值</param>
            <param name="isPercentage">是否是百分比</param>
            <param name="isCheckProtected">是否使用插队保护机制</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SetCharactersToAIControl(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            设置角色为 AI 控制
            </summary>
            <param name="bySystem"></param>
            <param name="cancel"></param>
            <param name="characters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.SetCharactersToAIControl(System.Boolean,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            设置角色为 AI 控制 [ 玩家手动设置 ]
            </summary>
            <param name="cancel"></param>
            <param name="characters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.IsCharacterInAIControlling(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.IsCharacterInAIControllingBySystem(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态 [ 系统控制 ]
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.IsCharacterInAIControllingByUser(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            检查角色是否在 AI 控制状态 [ 玩家手动设置 ]
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CheckSkilledImmuneAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Entity.Skill,Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            免疫检定
            </summary>
            <param name="character"></param>
            <param name="targets"></param>
            <param name="skill"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.CalculateCharacterDamageStatistics(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,Milimoe.FunGame.Core.Library.Constant.DamageType,System.Double)">
            <summary>
            计算角色的数据
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.Equip(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            装备物品
            </summary>
            <param name="character"></param>
            <param name="item"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.Equip(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.EquipSlotType,Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Entity.Item@)">
            <summary>
            装备物品到指定栏位，并返回被替换的装备（如果有的话）
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <param name="item"></param>
            <param name="previous"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.UnEquip(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.EquipSlotType)">
            <summary>
            取消装备，并返回被替换的装备（如果有的话）
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.TurnStart">
            <summary>
            回合开始事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnTurnStartAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item})">
            <summary>
            回合开始事件
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.TurnEnd">
            <summary>
            回合结束事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnTurnEndAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            回合结束事件
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.DecideAction">
            <summary>
            决定角色的行动事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnDecideActionAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item})">
            <summary>
            决定角色的行动事件
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.SelectSkill">
            <summary>
            角色需要选择一个技能
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnSelectSkillAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill})">
            <summary>
            角色需要选择一个技能
            </summary>
            <param name="character"></param>
            <param name="skills"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.SelectItem">
            <summary>
            角色需要选择一个物品
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnSelectItemAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Item})">
            <summary>
            角色需要选择一个物品
            </summary>
            <param name="character"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.SelectTargetGrid">
            <summary>
            选取移动目标事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnSelectTargetGridAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Library.Common.Addon.GameMap,System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取移动目标事件
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="map"></param>
            <param name="moveRange"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.SelectSkillTargets">
            <summary>
            选取技能目标事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnSelectSkillTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取技能目标事件
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="castRange"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.SelectNormalAttackTargets">
            <summary>
            选取普通攻击目标事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnSelectNormalAttackTargetsAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.NormalAttack,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Library.Common.Addon.Grid})">
            <summary>
            选取普通攻击目标事件
            </summary>
            <param name="character"></param>
            <param name="attack"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="attackRange"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.InterruptCasting">
            <summary>
            打断施法事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnInterruptCastingAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法事件
            </summary>
            <param name="cast"></param>
            <param name="skill"></param>
            <param name="interrupter"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculation">
            <summary>
            死亡结算事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnDeathCalculationAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算事件
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculationByTeammate">
            <summary>
            死亡结算（击杀队友）事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnDeathCalculationByTeammateAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算（击杀队友）事件
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterDeath">
            <summary>
            角色死亡事件，此事件位于 <see cref="E:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculation"/> 之后
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterDeathAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色死亡事件，此事件位于 <see cref="E:Milimoe.FunGame.Core.Model.GamingQueue.DeathCalculation"/> 之后
            </summary>
            <param name="current"></param>
            <param name="death"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.HealToTarget">
            <summary>
            治疗事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnHealToTargetAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            治疗事件
            </summary>
            <param name="actor"></param>
            <param name="target"></param>
            <param name="heal"></param>
            <param name="isRespawn"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.DamageToEnemy">
            <summary>
            造成伤害事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnDamageToEnemyAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Double,System.Boolean,Milimoe.FunGame.Core.Library.Constant.DamageType,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            造成伤害事件
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="actualDamage"></param>
            <param name="isNormalAttack"></param>
            <param name="damageType"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterNormalAttack">
            <summary>
            角色普通攻击事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterNormalAttackAsync(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            角色普通攻击事件
            </summary>
            <param name="actor"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterPreCastSkill">
            <summary>
            角色吟唱技能事件（包括直接释放战技）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterPreCastSkillAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.SkillTarget)">
            <summary>
            角色吟唱技能事件（包括直接释放战技）
            </summary>
            <param name="actor"></param>
            <param name="skillTarget"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterCastSkill">
            <summary>
            角色释放技能事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterCastSkillAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.SkillTarget,System.Double)">
            <summary>
            角色释放技能事件
            </summary>
            <param name="actor"></param>
            <param name="skillTarget"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterUseItem">
            <summary>
            角色使用物品事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterUseItemAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            角色使用物品事件
            </summary>
            <param name="actor"></param>
            <param name="item"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterCastItemSkill">
            <summary>
            角色释放物品的技能事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterCastItemSkillAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Item,Milimoe.FunGame.Core.Entity.SkillTarget,System.Double,System.Double)">
            <summary>
            角色释放物品的技能事件
            </summary>
            <param name="actor"></param>
            <param name="item"></param>
            <param name="skillTarget"></param>
            <param name="costMP"></param>
            <param name="costEP"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterImmuned">
            <summary>
            角色免疫事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterImmunedAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Interface.Entity.ISkill,Milimoe.FunGame.Core.Entity.Item)">
            <summary>
            角色免疫事件
            </summary>
            <param name="character"></param>
            <param name="immune"></param>
            <param name="skill"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterDoNothing">
            <summary>
            角色主动结束回合事件（区别于放弃行动，这个是主动的）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterDoNothingAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色主动结束回合事件（区别于放弃行动，这个是主动的）
            </summary>
            <param name="actor"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterGiveUp">
            <summary>
            角色放弃行动事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterGiveUpAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色放弃行动事件
            </summary>
            <param name="actor"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.CharacterMove">
            <summary>
            角色移动事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnCharacterMoveAsync(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Common.Addon.Grid)">
            <summary>
            角色移动事件
            </summary>
            <param name="actor"></param>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.GameEnd">
            <summary>
            游戏结束事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnGameEndAsync(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            游戏结束事件
            </summary>
            <param name="winner"></param>
            <returns></returns>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.GamingQueue.QueueUpdated">
            <summary>
            行动顺序表更新事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.GamingQueue.OnQueueUpdatedAsync(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},Milimoe.FunGame.Core.Entity.Character,System.Double,Milimoe.FunGame.Core.Library.Constant.QueueUpdatedReason,System.String)">
            <summary>
            行动顺序表更新事件
            </summary>
            <param name="characters"></param>
            <param name="character"></param>
            <param name="hardnessTime"></param>
            <param name="reason"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.MixGamingQueue">
            <summary>
            混战游戏队列，增强版混战模式 <see cref="F:Milimoe.FunGame.Core.Library.Constant.RoomType.Mix"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.MixGamingQueue.AfterDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算后
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.MixGamingQueue.EndGameInfo(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            游戏结束信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.MixGamingQueue.#ctor(System.Action{System.String})">
            <summary>
            创建一个混战游戏队列
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.MixGamingQueue.#ctor(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Action{System.String})">
            <summary>
            创建一个混战游戏队列并初始化角色
            </summary>
            <param name="characters"></param>
            <param name="writer"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.Interval">
            <summary>
            循环执行间隔
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.Action">
            <summary>
            任务执行逻辑
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.LastRun">
            <summary>
            记录上一次运行时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.NextRun">
            <summary>
            记录下一次运行时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.Error">
            <summary>
            最后一次运行时发生的错误
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.RecurringTask.ErrorHandler">
            <summary>
            捕获异常后，触发的回调函数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.TimeOfDay">
            <summary>
            每天的目标时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.Action">
            <summary>
            任务执行逻辑
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.LastRun">
            <summary>
            记录上一次运行时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.IsTodayRun">
            <summary>
            当天是否已经运行
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.Error">
            <summary>
            最后一次运行时发生的错误
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.ScheduledTask.ErrorHandler">
            <summary>
            捕获异常后，触发的回调函数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.Server_Address">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.Server_Port">
            <summary>
            服务器端口号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.SocketToken">
            <summary>
            SocketToken
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginKey">
            <summary>
            LoginKey
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginUser">
            <summary>
            已登录的用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginUserName">
            <summary>
            已登录用户名
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.InRoom">
            <summary>
            所处的房间
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.TeamGamingQueue">
            <summary>
            团队游戏队列，团队模式 <see cref="F:Milimoe.FunGame.Core.Library.Constant.RoomType.Team"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.TeamGamingQueue.EliminatedTeams">
            <summary>
            当前团灭的团队顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.TeamGamingQueue.Teams">
            <summary>
            团队及其成员
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.TeamGamingQueue._eliminatedTeams">
            <summary>
            当前团灭的团队顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Model.TeamGamingQueue._teams">
            <summary>
            团队及其成员
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.AddTeam(System.String,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            添加一个团队
            </summary>
            <param name="teamName"></param>
            <param name="characters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.GetTeam(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取角色的团队
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.GetTeamFromEliminated(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            从已淘汰的团队中获取角色的团队
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.GetTeammates(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取某角色的团队成员
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.AfterCharacterAction(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Library.Constant.CharacterActionType)">
            <summary>
            角色行动后
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.OnDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算时
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.AfterDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算后
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.EndGameInfo(Milimoe.FunGame.Core.Entity.Team)">
            <summary>
            游戏结束信息 [ 团队版 ] 
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.#ctor(System.Action{System.String})">
            <summary>
            创建一个团队游戏队列
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.#ctor(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Action{System.String})">
            <summary>
            创建一个团队游戏队列并初始化角色
            </summary>
            <param name="characters"></param>
            <param name="writer"></param>
        </member>
        <member name="E:Milimoe.FunGame.Core.Model.TeamGamingQueue.GameEndTeam">
            <summary>
            游戏结束事件（团队版）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.TeamGamingQueue.OnGameEndTeamAsync(Milimoe.FunGame.Core.Entity.Team)">
            <summary>
            游戏结束事件（团队版）
            </summary>
            <param name="winner"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.AddonManager.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.AddonManager.ModuleFilePaths">
            <summary>
            已加载的模组DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadPlugins(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.Plugin},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            从plugins目录加载所有插件
            </summary>
            <param name="plugins"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadServerPlugins(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.ServerPlugin},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            从plugins目录加载所有Server插件
            </summary>
            <param name="plugins"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadWebAPIPlugins(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.WebAPIPlugin},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            从plugins目录加载所有WebAPI插件
            </summary>
            <param name="plugins"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameModules(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.SkillModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.ItemModule},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            从modules目录加载所有模组
            </summary>
            <param name="modules"></param>
            <param name="characters"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameModulesForServer(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.SkillModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.ItemModule},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            从modules目录加载所有适用于服务器的模组
            </summary>
            <param name="servers"></param>
            <param name="characters"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameMaps(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameMap},System.Object[])">
            <summary>
            从maps目录加载所有地图
            </summary>
            <param name="maps"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.AddAddonInstances``1(System.Type,System.Collections.Generic.Dictionary{System.String,``0},System.Func{``0,System.Boolean})">
            <summary>
            添加构造好的模组类实例到字典中
            </summary>
            <typeparam name="T">加载的类型</typeparam>
            <param name="type">循环程序集的类型</param>
            <param name="dictionary">实例的字典</param>
            <param name="isadd">加载时触发的检查方法，返回false不添加</param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.HTTPManager.HttpListener">
            <summary>
            实际的 <see cref="T:System.Net.HttpListener"/> 监听实例 [ 单例 ]
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.StartListening(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            开始监听
            当 <paramref name="address"/> = "*" 时，需要管理员权限
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="subUrl"></param>
            <param name="ssl"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.Connect(System.Uri)">
            <summary>
            客户端连接远程 WebSocket 服务器
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.Send(System.Net.WebSockets.ClientWebSocket,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端向服务器发送消息
            </summary>
            <param name="socket"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.Send(System.Net.WebSockets.WebSocket,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            服务器向客户端发送消息
            </summary>
            <param name="socket"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.Accept">
            <summary>
            服务器接受一个 HTTP 的 WebSocket 升级请求
            </summary>
            <returns>[0]客户端IP地址；[1]客户端的WebSocket实例</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.Receive(System.Net.WebSockets.WebSocket)">
            <summary>
            服务器接收客户端消息
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.ReceiveMessage(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient)">
            <summary>
            客户端接收服务器消息
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.HTTPManager.GetSocketObjects(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketReceiveResult,System.String)">
            <summary>
            将收到的消息反序列为 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.SocketObject"/>
            </summary>
            <param name="socket"></param>
            <param name="result"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.JsonManager.GeneralOptions">
            <summary>
            默认的序列化选项
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetString``1(``0)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetString``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象，使用 <paramref name="reader"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject(System.String)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(Milimoe.FunGame.Core.Library.Common.Network.SocketObject,System.Int32)">
            <summary>
            反序列化SocketObject中索引为index的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.IndexOutOfArrayLengthException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            反序列化Dictionary中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Hashtable,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Dictionary中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObjects``1(System.String)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObjects``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.IsCompleteJson``1(System.String)">
            <summary>
            检查字符串是否为完整的JSON对象
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.MailManager.SmtpClients">
            <summary>
            用于保存Smtp客户端
            一个邮件服务对应一个Smtp客户端
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.MailManager.MailSenders">
            <summary>
            用于保存邮件服务
            允许服务器同时存在多个服务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.GetSender(System.Guid)">
            <summary>
            获取某个已经保存过的邮件服务
            </summary>
            <param name="mailSenderID"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.Send(Milimoe.FunGame.Core.Api.Transmittal.MailSender,Milimoe.FunGame.Core.Library.Common.Network.MailObject,System.String@)">
            <summary>
            统一调用此方法发送邮件
            </summary>
            <param name="sender"></param>
            <param name="mail"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.Dispose(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            关闭邮件服务
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.SocketManager.Socket">
            <summary>
            客户端专用Socket
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.SocketManager.ServerSocket">
            <summary>
            服务器端专用Socket
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.StartListening(System.Int32,System.Int32)">
            <summary>
            创建服务器监听Socket
            </summary>
            <param name="port">监听端口号</param>
            <param name="maxConnection">最大连接数量</param>
            <returns>服务器端专用Socket</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Accept">
            <summary>
            创建一个监听到客户端Socket
            </summary>
            <returns>客户端IP地址[0]和客户端Socket[1]</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Connect(System.String,System.Int32)">
            <summary>
            创建客户端Socket
            </summary>
            <param name="address">服务器IP地址</param>
            <param name="port">服务器监听端口</param>
            <returns>客户端专用Socket</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Send(System.Net.Sockets.Socket,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于服务器端向客户端Socket发送信息
            </summary>
            <param name="clientSocket">客户端Socket</param>
            <param name="obj">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.SendAsync(System.Net.Sockets.Socket,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于服务器端向客户端Socket发送信息 [ 异步版 ]
            </summary>
            <param name="clientSocket">客户端Socket</param>
            <param name="obj">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Send(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于客户端向服务器Socket发送信息
            </summary>
            <param name="obj">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.SendAsync(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于客户端向服务器Socket发送信息 [ 异步版 ]
            </summary>
            <param name="obj">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收数据流中的信息
            <para/>如果是服务器接收信息需要传入客户端Socket <paramref name="clientSocket"/>
            </summary>
            <param name="clientSocket">如果是服务器接收信息需要传入客户端Socket</param>
            <returns>SocketObjects</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.ReceiveAsync(System.Net.Sockets.Socket)">
            <summary>
            接收数据流中的信息 [ 异步版 ]
            <para/>如果是服务器接收信息需要传入客户端Socket <paramref name="clientSocket"/>
            </summary>
            <param name="clientSocket">如果是服务器接收信息需要传入客户端Socket</param>
            <returns>SocketObjects</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Service.SocketManager.SocketReceiveHandler">
            <summary>
            监听事件的委托
            </summary>
            <param name="obj">SocketObject</param>
        </member>
        <member name="E:Milimoe.FunGame.Core.Service.SocketManager.SocketReceive">
            <summary>
            监听事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.OnSocketReceive(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            触发异步监听事件
            </summary>
            <param name="obj">SocketObject</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.NewTask(System.Action)">
            <summary>
            开启一个任务：调用返回对象的 OnCompleted() 方法可以执行后续操作，支持异步
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.NewTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            开启一个任务：调用返回对象的 OnCompleted() 方法可以执行后续操作，支持异步
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter">
            <summary>
            内部实现类
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            返回 ITaskAwaiter 可以进一步等待并执行方法<para/>
            注意事项：async () 委托的后续 OnCompleted 方法将不会进一步等待，而是直接执行，因为它是异步的
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter.OnError(System.Action{System.Exception})">
            <summary>
            在捕获到异常时，将触发 Error 事件
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
    </members>
</doc>
